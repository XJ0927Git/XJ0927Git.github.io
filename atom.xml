<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Teach_Jiang</title>
  
  
  <link href="http://jiangbk.top/atom.xml" rel="self"/>
  
  <link href="http://jiangbk.top/"/>
  <updated>2021-02-17T10:49:17.251Z</updated>
  <id>http://jiangbk.top/</id>
  
  <author>
    <name>guojiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>12_Linux安装MySQL</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/12-Linux%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/12-Linux%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2021-02-17T10:44:40.000Z</published>
    <updated>2021-02-17T10:49:17.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-Linux安装MySQL"><a href="#12-Linux安装MySQL" class="headerlink" title="12_Linux安装MySQL"></a>12_Linux安装MySQL</h1><blockquote><p>YUM（ Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。它基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，无须繁琐地一次次下载、安装</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">步骤1: 检测系统是否自带安装mysql</span><br><span class="line">[root@localhost &#x2F;]# yum list installed | grep mysql </span><br><span class="line"></span><br><span class="line">步骤2: 删除系统自带的mysql及其依赖（防止后面安装发生冲突）</span><br><span class="line">[root@localhost &#x2F;]# yum -y remove mysql-libs.x86_64 </span><br><span class="line"></span><br><span class="line">步骤3: 给CentOS添加rpm源，并且选择较新的源,RPM软件包管理器缩写</span><br><span class="line">[root@localhost &#x2F;]# wget --no-check-certificate dev.mysql.com&#x2F;get&#x2F;mysql-community-release-el6-5.noarch.rpm </span><br><span class="line"></span><br><span class="line">步骤4: 安装第一步下载的rpm文件</span><br><span class="line">[root@localhost &#x2F;]# yum install mysql-community-release-el6-5.noarch.rpm 此处需要输入&quot;y&quot; </span><br><span class="line">[root@localhost &#x2F;]# yum repolist enabled | grep mysql &#x2F;&#x2F;列出你所有的yum repo文件 </span><br><span class="line"></span><br><span class="line">步骤5: 使用yum安装mysql</span><br><span class="line">[root@localhost &#x2F;]# yum install mysql-community-server 此处输入3次“y” 安装完毕 </span><br><span class="line"></span><br><span class="line">步骤6: 启动mysql服务</span><br><span class="line">[root@localhost &#x2F;]# service mysqld start </span><br><span class="line"></span><br><span class="line">步骤7: 查看mysql是否自启动,并且设置开启自启动</span><br><span class="line">[root@localhost &#x2F;]# chkconfig --list | grep mysqld </span><br><span class="line">0 1 2 3 4 5 6 代表centOS启动状态</span><br><span class="line">[root@localhost &#x2F;]# chkconfig mysqld on </span><br><span class="line"></span><br><span class="line">步骤8: 修改字符集为UTF-8</span><br><span class="line">[root@localhost &#x2F;]# vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">在[mysqld]部分添加：</span><br><span class="line">character-set-server&#x3D;utf8 </span><br><span class="line">在文件末尾新增[client]段，并在[client]段添加：</span><br><span class="line">default-character-set&#x3D;utf8 </span><br><span class="line">esc退出编辑</span><br><span class="line">:wq保存退出</span><br><span class="line">修改完成后保存重启服务</span><br><span class="line">[root@localhost &#x2F;]# service mysqld restart </span><br><span class="line"></span><br><span class="line">步骤9: 修改默认配置 </span><br><span class="line">[root@localhost &#x2F;]# mysql_secure_installation </span><br><span class="line">按照提示进行配置，这里默认root用户的密码空，直接回车即可。此处输入内容:&quot;y&quot;,&quot;y&quot;,&quot;n&quot;,&quot;y&quot;,&quot;y&quot; </span><br><span class="line"></span><br><span class="line">步骤10:授权远程登录</span><br><span class="line">方案1:实现远程连接(授权法)- 将权限改为ALL PRIVILEGES</span><br><span class="line">[root@localhost &#x2F;]# mysql -uroot -p</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed </span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">&#x2F;&#x2F;mysql 新设置用户或更改密码后需用flush privileges刷新MySQL的系统权限相关表，否则会出现拒绝访问</span><br><span class="line">mysql&gt; select host,user,password from user; </span><br><span class="line">这样机器就可以以用户名root密码root远程访问该机器上的MySql. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方案2:实现远程连接（改表法）</span><br><span class="line">use mysql;</span><br><span class="line">update user set host &#x3D; &#39;%&#39; where user &#x3D; &#39;root&#39;;</span><br><span class="line">fiush privileges </span><br><span class="line">这样在远端就可以通过root用户访问Mysql</span><br></pre></td></tr></table></figure><p>注意在测试时，要关闭防火墙 ~~</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;12-Linux安装MySQL&quot;&gt;&lt;a href=&quot;#12-Linux安装MySQL&quot; class=&quot;headerlink&quot; title=&quot;12_Linux安装MySQL&quot;&gt;&lt;/a&gt;12_Linux安装MySQL&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;YUM（ </summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>11_Linux 安装 JDK8</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/11-Linux-%E5%AE%89%E8%A3%85-JDK8/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/11-Linux-%E5%AE%89%E8%A3%85-JDK8/</id>
    <published>2021-02-17T10:43:50.000Z</published>
    <updated>2021-02-17T10:49:27.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-Linux-安装-JDK8"><a href="#11-Linux-安装-JDK8" class="headerlink" title="11_Linux 安装 JDK8"></a>11_Linux 安装 JDK8</h1><h4 id="1-下载-JDK"><a href="#1-下载-JDK" class="headerlink" title="1.下载 JDK"></a>1.下载 JDK</h4><p>百度云链接：<a href="https://pan.baidu.com/s/1KFCLXSrsVvjYBNweugZv0w">https://pan.baidu.com/s/1KFCLXSrsVvjYBNweugZv0w</a><br>提取码：r3tt</p><h4 id="2-创建保存JDK的文件夹"><a href="#2-创建保存JDK的文件夹" class="headerlink" title="2.创建保存JDK的文件夹"></a>2.创建保存JDK的文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir jdkhome</span><br></pre></td></tr></table></figure><h4 id="3-解压JDK到jdkhome下"><a href="#3-解压JDK到jdkhome下" class="headerlink" title="3.解压JDK到jdkhome下"></a>3.解压JDK到jdkhome下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf jdk-8u11-linux-x64.tar.gz  -C &#x2F;home&#x2F;admin&#x2F;jdkhome</span><br></pre></td></tr></table></figure><h4 id="4-测试JDK是否安装成功"><a href="#4-测试JDK是否安装成功" class="headerlink" title="4.测试JDK是否安装成功"></a>4.测试JDK是否安装成功</h4><p>在JDK安装后的bin目录下运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@xj0927 bin]# .&#x2F;java -version</span><br><span class="line">java version &quot;1.8.0_11&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_11-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)</span><br></pre></td></tr></table></figure><p>现在你只能在bin目录下查看JDK，所以还需要配置环境变量</p><h4 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h4><h6 id="1-先切换到root用户-su-root"><a href="#1-先切换到root用户-su-root" class="headerlink" title="(1)先切换到root用户:su root"></a>(1)先切换到root用户:su root</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root </span><br><span class="line">:输入密码</span><br></pre></td></tr></table></figure><p>(2)修改 profile 文件的操作权限: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +w &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h6 id="3-编辑profile文件"><a href="#3-编辑profile文件" class="headerlink" title="(3)编辑profile文件:"></a>(3)编辑profile文件:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h6 id="4-添加JAVA-HOME变量"><a href="#4-添加JAVA-HOME变量" class="headerlink" title="(4)添加JAVA_HOME变量:"></a>(4)添加JAVA_HOME变量:</h6><p>在文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#前面两条语句即可</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;home&#x2F;admin&#x2F;jdkhome&#x2F;jdk1.8.0_11</span><br><span class="line"># $PATH放在后面,覆盖自带的openjdk</span><br><span class="line">export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line"></span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br></pre></td></tr></table></figure><h6 id="5-使环境变量及时生效"><a href="#5-使环境变量及时生效" class="headerlink" title="(5)使环境变量及时生效"></a>(5)使环境变量及时生效</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h6 id="6-查看变量是否更新成功"><a href="#6-查看变量是否更新成功" class="headerlink" title="(6)查看变量是否更新成功:"></a>(6)查看变量是否更新成功:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><h4 id="6-查看JDK"><a href="#6-查看JDK" class="headerlink" title="6.查看JDK"></a>6.查看JDK</h4><h6 id="7-在任意目录下测试环境是否配置成功"><a href="#7-在任意目录下测试环境是否配置成功" class="headerlink" title="(7)在任意目录下测试环境是否配置成功"></a>(7)在任意目录下测试环境是否配置成功</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>admin用户下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[admin@xj0927 bin]$ java -version</span><br><span class="line">java version &quot;1.8.0_11&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_11-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.11-b03, mixed mode)</span><br></pre></td></tr></table></figure><p>也可输入java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[admin@xj0927 bin]$ java</span><br><span class="line">Usage: java [-options] class [args...]</span><br><span class="line">           (to execute a class)</span><br><span class="line">   or  java [-options] -jar jarfile [args...]</span><br><span class="line">           (to execute a jar file)</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>输入javac:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[admin@xj0927 bin]$ javac</span><br><span class="line">Usage: javac &lt;options&gt; &lt;source files&gt;</span><br><span class="line">where possible options include:</span><br><span class="line">....</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;11-Linux-安装-JDK8&quot;&gt;&lt;a href=&quot;#11-Linux-安装-JDK8&quot; class=&quot;headerlink&quot; title=&quot;11_Linux 安装 JDK8&quot;&gt;&lt;/a&gt;11_Linux 安装 JDK8&lt;/h1&gt;&lt;h4 id=&quot;1-下载-JDK&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>10_Linux 基本命令</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/10-Linux-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/10-Linux-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</id>
    <published>2021-02-17T10:41:00.000Z</published>
    <updated>2021-02-17T10:53:05.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-Linux-基本命令"><a href="#10-Linux-基本命令" class="headerlink" title="10_Linux 基本命令"></a>10_Linux 基本命令</h1><h2 id="1）目录结构"><a href="#1）目录结构" class="headerlink" title="1）目录结构"></a>1）目录结构</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217184322.png"></p><p>使用命令查看:<code>ll</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217184323.png"></p><ul><li>bin 存放二进制可执行文件(ls,cat,mkdir等) </li><li>boot 存放用于<strong>系统引导</strong>时使用的各种文件</li><li>dev 用于存放<strong>设备文件</strong></li><li>etc 存放系统<strong>配置文件</strong></li><li>home 存放所有<strong>用户文件</strong>的根目录 </li><li>lib 存放跟文件系统中的程序运行所需要的共享库及内核模块</li><li>mnt 系统管理员安装<strong>临时文件</strong>系统的安装点</li><li>opt 额外安装的可选应用<strong>程序包所放</strong>置的位置</li><li>usr 用于存放系统应用程序，比较重要的目录**/usr/local 本地管理员软件**安装目录</li></ul><p>需要关注的目录：</p><p>/etc 配置目录–&gt;软件安装后配置文件选择放入的地址。 </p><p>/usr/local软件安装目录</p><p>/opt目录一般用来安装应用程序。部署的API程序一般放在这个目录。 </p><h2 id="2）文件权限"><a href="#2）文件权限" class="headerlink" title="2）文件权限"></a>2）文件权限</h2><p>在linux下每个用户都有不同的权限，普通用户只能在自己的主目录下进行写操作. </p><p>三种基本权限:</p><ul><li>R 读权限</li><li>W 写权限</li><li>X 执行权限 </li></ul><h6 id="1-文件各部分"><a href="#1-文件各部分" class="headerlink" title="/1.文件各部分:"></a>/1.文件各部分:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--. 1 root root 26 Jul 16&#x3D;1 12:02 qf.log</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217184239.png"></p><h6 id="2-权限各部分：分为4部分-1-2-4-5-7-8-10"><a href="#2-权限各部分：分为4部分-1-2-4-5-7-8-10" class="headerlink" title="/2.权限各部分：分为4部分(1,2-4,5-7,8-10)"></a>/2.权限各部分：分为4部分(1,2-4,5-7,8-10)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217184251.png"></p><h6 id="3-修改权限方式"><a href="#3-修改权限方式" class="headerlink" title="/3.修改权限方式"></a>/3.修改权限方式</h6><p>方式1：字符设置法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">格式：chmod [who][+ | - | &#x3D;] 文件名</span><br><span class="line">who (u 用户user ,g用户组group,o其他用户,a所有用户默认) </span><br><span class="line">操作符号:</span><br><span class="line">+添加某个权限</span><br><span class="line">-取消某个权限</span><br><span class="line">&#x3D;赋予权限</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">修改一个权限</span><br><span class="line">chmod g+w a.txt</span><br><span class="line">chmod u+x,g+w,o+w a.txt </span><br></pre></td></tr></table></figure><p>方式2：数字设定法</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217184259.png"></p><ul><li>4表可读权限=r</li><li>2表写入权限=w</li><li>1表可执行=x</li><li>0无权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">举例:</span><br><span class="line">当前的数字权限: </span><br><span class="line">用户权限&#x3D;rwx&#x3D;4+2+1&#x3D;7 </span><br><span class="line">所属组权限&#x3D;r--&#x3D;4+0+0&#x3D;4 </span><br><span class="line">其他用户权限&#x3D;r--&#x3D;4+0+0&#x3D;4 </span><br><span class="line">组合:744</span><br><span class="line"></span><br><span class="line">chmod 744 a.txt</span><br></pre></td></tr></table></figure><h5 id="3-常用指令"><a href="#3-常用指令" class="headerlink" title="3)常用指令"></a>3)常用指令</h5><h6 id="1-查看目录"><a href="#1-查看目录" class="headerlink" title="/1.查看目录"></a>/1.查看目录</h6><ul><li>ls 查看目录内容 </li><li>ll 查看详细信息 </li></ul><h6 id="2-创建目录"><a href="#2-创建目录" class="headerlink" title="/2.创建目录"></a>/2.创建目录</h6><ul><li>mkdir ：创建目录 </li><li>mkdir -p 创建目录以及子目录，多个目录同时创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;a&#x2F;b&#x2F;c</span><br></pre></td></tr></table></figure><h6 id="3-切换目录"><a href="#3-切换目录" class="headerlink" title="/3.切换目录"></a>/3.<strong>切换目录</strong></h6><p>cd 切换目录</p><ul><li>cd .. 要加空格</li><li>cd ../xxx 进入上一级目录的子目录 </li></ul><h6 id="4-创建文件"><a href="#4-创建文件" class="headerlink" title="/4.创建文件"></a>/4.创建文件</h6><ul><li>touch ：创建一个空白的普通文件</li></ul><h6 id="5-写入内容"><a href="#5-写入内容" class="headerlink" title="/5.写入内容"></a>/5.写入内容</h6><p>echo :把内容重定向到指定的文件中 ，有则打开，无则创建 </p><ul><li>覆盖模式(会清除之前的内容)&gt;: echo “ww”&gt;aa.txt  </li><li>追加模式(不会清除之前的内容)&gt;&gt;: echo “ww”&gt;&gt;aa.txt</li></ul><h6 id="6-查看文件内容"><a href="#6-查看文件内容" class="headerlink" title="/6.查看文件内容"></a>/6.查看文件内容</h6><ul><li>cat ：查看文件内容 </li><li>more ：分页查看文件内容，按空格键换页 </li></ul><h6 id="7-复制"><a href="#7-复制" class="headerlink" title="/7.复制"></a>/7.复制</h6><ul><li>cp ：复制 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把a.txt复制到b文件夹下</span><br><span class="line">cp a.txt b</span><br></pre></td></tr></table></figure><h6 id="8-剪切、重命名"><a href="#8-剪切、重命名" class="headerlink" title="/8.剪切、重命名"></a>/8.剪切、重命名</h6><ul><li>mv ：剪切、重命名(剪切的文件 放在同一个目录中是重命名) </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">剪切:</span><br><span class="line">剪切a.txt到b文件夹下</span><br><span class="line">mv a.txt b</span><br><span class="line"></span><br><span class="line">重命名:</span><br><span class="line">将a.txt重命名为b.txt</span><br><span class="line">mv a.txt b.txt</span><br></pre></td></tr></table></figure><h6 id="9-删除"><a href="#9-删除" class="headerlink" title="/9.删除"></a>/9.删除</h6><ul><li>删除文件:rm 文件名</li><li>删除文件夹：rm -r 文件夹名</li><li>rm -fr 直接彻底删除，没有提示。 </li></ul><h6 id="10-统计行数"><a href="#10-统计行数" class="headerlink" title="/10.统计行数"></a>/10.统计行数</h6><ul><li>统计行数 : wc  -l  文件名</li></ul><h6 id="11-查看当前路径"><a href="#11-查看当前路径" class="headerlink" title="/11.查看当前路径"></a>/11.查看当前路径</h6><ul><li>pwd ：查看当前目录的绝对路径</li></ul><h6 id="12-显示主机名"><a href="#12-显示主机名" class="headerlink" title="/12.显示主机名"></a>/12.显示主机名</h6><ul><li>hostname ： 显示主机名 </li></ul><h6 id="13-查看系统信息"><a href="#13-查看系统信息" class="headerlink" title="/13.查看系统信息"></a>/13.查看系统信息</h6><ul><li><p>uname -a ：显示完整的系统信息 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[admin@xj0927 test]$ uname -a</span><br><span class="line">Linux xj0927 2.6.32-431.el6.x86_64 #1 SMP Fri Nov 22 03:15:09 UTC 2013 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br></pre></td></tr></table></figure><h6 id="14-查看进程耗时与占用"><a href="#14-查看进程耗时与占用" class="headerlink" title="/14.查看进程耗时与占用"></a>/14.查看进程耗时与占用</h6></li><li><p> top ：显示当前耗时的进程信息 ,每3秒刷新一次</p></li><li><p>cltr+c: 中断</p><p>top确认cpu和内存的占用情况</p></li></ul><h6 id="15-查看进程快照"><a href="#15-查看进程快照" class="headerlink" title="/15.查看进程快照"></a>/15.查看进程快照</h6><ul><li>ps - axu : 显示当前进程的快照</li><li>ps - axu  | grep java : 显示某個程序当前进程的快照</li></ul><h6 id="16-文件大小"><a href="#16-文件大小" class="headerlink" title="/16.文件大小"></a>/16.文件大小</h6><ul><li>du -sh:  显示文件的大小信息 </li></ul><h6 id="17-磁盘占用情况"><a href="#17-磁盘占用情况" class="headerlink" title="/17.磁盘占用情况"></a>/17.磁盘占用情况</h6><ul><li>df -lh : 磁盘使用情况 </li></ul><h6 id="18-查看网卡情况"><a href="#18-查看网卡情况" class="headerlink" title="/18.查看网卡情况"></a>/18.查看网卡情况</h6><ul><li>ifconfig ：查看或者配置网卡信息(ip addr) </li></ul><h6 id="19-结束进程"><a href="#19-结束进程" class="headerlink" title="/19.结束进程"></a>/19.结束进程</h6><ul><li>kill pid ：杀死进程 ,pid进程编号</li><li>Kill -9 :强制杀死</li></ul><h6 id="20-查看端口号"><a href="#20-查看端口号" class="headerlink" title="/20.查看端口号"></a>/20.查看端口号</h6><ul><li>netstat </li></ul><p>常用参数: </p><p>-a或–all：显示所有连线中的Socket； </p><p>-l或–listening：显示监控中的服务器的Socket； </p><p>-n或–numeric：直接使用ip地址，而不通过域名服务器； </p><p>-p或–programs：显示正在使用Socket的程序识别码和程序名称； </p><p>-t或–tcp：显示TCP传输协议的连线状况； </p><p>简写：netstat -tlnp</p><p>找出运行在指定端口的进程：netstat -tlnp | grep ‘:22’ </p><h6 id="21-压缩文件与解压"><a href="#21-压缩文件与解压" class="headerlink" title="/21.压缩文件与解压"></a>/21.压缩文件与解压</h6><ul><li><p>c ：创建的一个归档文件 </p></li><li><p>x ：拆包 </p></li><li><p>z ：以gzip 格式压缩 j ：以bzip2格式压缩 </p></li><li><p>v ：显示打包或者拆包的文件信息 </p></li><li><p>f ： 后面紧接一个 归档文件 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">压缩指定文件到指定目录下:</span><br><span class="line">tar -czvf 目录/压缩文件名.tar.gz 源文件</span><br><span class="line"></span><br><span class="line">将b1文件夹下的a.txt压缩到b2文件夹下:</span><br><span class="line">tar -czvf b2/b1.tar.gz b1/a.txt</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解压指点文件到指定文件夹下:</span><br><span class="line">tar -xzvf 目录/压缩包名.tar.gz -C 路径/</span><br><span class="line"></span><br><span class="line">将d2目录下的a.tar.gz解压到d1目录下</span><br><span class="line">tar -xzvf d2/a.tar.gz -C /home/admin/test/</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="3）文本编辑器"><a href="#3）文本编辑器" class="headerlink" title="3）文本编辑器"></a>3）文本编辑器</h2><p>一般模式 ，默认方式，该模式不能编辑</p><ul><li><p>按 i（insert） 进入 插入模式</p><p>编辑模式</p></li><li><p>该模式可以编辑文档，按esc 退出插入模式 </p><p>命令模式</p></li><li><p>一般模式中按：进入命令模式[yy复制一行, dd剪切一行,p粘贴] </p></li><li><p>:q 安全退出，当没有操作该文档 </p></li><li><p>:q！修改了内容，但不想保存，强制退出 </p></li><li><p>:wq 保存退出 </p></li><li><p>:set number 显示行号set nonumber 取消行号显示</p></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;10-Linux-基本命令&quot;&gt;&lt;a href=&quot;#10-Linux-基本命令&quot; class=&quot;headerlink&quot; title=&quot;10_Linux 基本命令&quot;&gt;&lt;/a&gt;10_Linux 基本命令&lt;/h1&gt;&lt;h2 id=&quot;1）目录结构&quot;&gt;&lt;a href=&quot;#1）目</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>9_CentOs 设置防火墙及开放端口</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/9-CentOs-%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%8A%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/9-CentOs-%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%E5%8F%8A%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3/</id>
    <published>2021-02-17T10:40:08.000Z</published>
    <updated>2021-02-17T10:48:43.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-CentOs-设置防火墙及开放端口"><a href="#9-CentOs-设置防火墙及开放端口" class="headerlink" title="9_CentOs 设置防火墙及开放端口"></a>9_CentOs 设置防火墙及开放端口</h1><blockquote><p>Linux系统中默认有防火墙 Iptables 管理所有的端口，只启用默认远程连接22端口其他都关闭</p></blockquote><h5 id="1-方案一：修改防火墙配置"><a href="#1-方案一：修改防火墙配置" class="headerlink" title="1)方案一：修改防火墙配置"></a>1)<strong>方案一：修改防火墙配置</strong></h5><p>将开启的端口加入防火墙白名单中： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;iptables</span><br></pre></td></tr></table></figure><p>增加下面代码 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state -- state NEW -m tcp --dport 8080 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state -- state NEW -m tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure><p>保存退出，重启防火墙 </p><h6 id="重启防火墙："><a href="#重启防火墙：" class="headerlink" title="重启防火墙："></a>重启防火墙：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h6 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables status</span><br></pre></td></tr></table></figure><h5 id="2-方案二：关闭防火墙"><a href="#2-方案二：关闭防火墙" class="headerlink" title="2)方案二：关闭防火墙"></a>2)<strong>方案二：关闭防火墙</strong></h5><h6 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙 :"></a>关闭防火墙 :</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><h6 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙:"></a>开启防火墙:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables start</span><br></pre></td></tr></table></figure><h6 id="关闭防火墙自动启动"><a href="#关闭防火墙自动启动" class="headerlink" title="关闭防火墙自动启动"></a>关闭防火墙自动启动</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfifig iptables of</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;9-CentOs-设置防火墙及开放端口&quot;&gt;&lt;a href=&quot;#9-CentOs-设置防火墙及开放端口&quot; class=&quot;headerlink&quot; title=&quot;9_CentOs 设置防火墙及开放端口&quot;&gt;&lt;/a&gt;9_CentOs 设置防火墙及开放端口&lt;/h1&gt;&lt;bloc</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>8_CentOs 下安装 Tomcat</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/8-CentOs-%E4%B8%8B%E5%AE%89%E8%A3%85-Tomcat/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/8-CentOs-%E4%B8%8B%E5%AE%89%E8%A3%85-Tomcat/</id>
    <published>2021-02-17T10:39:25.000Z</published>
    <updated>2021-02-17T10:48:25.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-CentOs-下安装-Tomcat"><a href="#8-CentOs-下安装-Tomcat" class="headerlink" title="8_CentOs 下安装 Tomcat"></a>8_CentOs 下安装 Tomcat</h1><h5 id="1-上传tomcat压缩包"><a href="#1-上传tomcat压缩包" class="headerlink" title="1.上传tomcat压缩包"></a>1.上传tomcat压缩包</h5><p>百度云链接：<a href="https://pan.baidu.com/s/1R2njJS-l8DDwCDhV1sFZJw">https://pan.baidu.com/s/1R2njJS-l8DDwCDhV1sFZJw</a><br>提取码：tscu</p><h5 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf apache-tomcat-8.5.56.tar.gz </span><br></pre></td></tr></table></figure><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h5><p>进入解压包下的bin目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动:</span><br><span class="line">.&#x2F;startup.sh</span><br><span class="line"></span><br><span class="line">关闭:</span><br><span class="line">.&#x2F;shutdown.sh</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;8-CentOs-下安装-Tomcat&quot;&gt;&lt;a href=&quot;#8-CentOs-下安装-Tomcat&quot; class=&quot;headerlink&quot; title=&quot;8_CentOs 下安装 Tomcat&quot;&gt;&lt;/a&gt;8_CentOs 下安装 Tomcat&lt;/h1&gt;&lt;h5 i</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>7_本地文件上传到Linux</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/7-%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0Linux/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/7-%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%B0Linux/</id>
    <published>2021-02-17T10:38:20.000Z</published>
    <updated>2021-02-17T10:48:06.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-本地文件上传到Linux"><a href="#7-本地文件上传到Linux" class="headerlink" title="7_本地文件上传到Linux"></a>7_本地文件上传到Linux</h1><h4 id="1-SecureFXPortable软件下载"><a href="#1-SecureFXPortable软件下载" class="headerlink" title="1. SecureFXPortable软件下载"></a>1. SecureFXPortable软件下载</h4><p>百度云链接：<a href="https://pan.baidu.com/s/19QHs7QCFCkgRgk1Nq9d2Gw">https://pan.baidu.com/s/19QHs7QCFCkgRgk1Nq9d2Gw</a><br>提取码：01ue</p><h4 id="2-建立连接"><a href="#2-建立连接" class="headerlink" title="2. 建立连接"></a>2. 建立连接</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183850.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183851.png"></p><h4 id="3-上传"><a href="#3-上传" class="headerlink" title="3)上传"></a>3)上传</h4><p>直接将左侧Windows系统下的压缩包拖拽到右侧即可</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183852.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;7-本地文件上传到Linux&quot;&gt;&lt;a href=&quot;#7-本地文件上传到Linux&quot; class=&quot;headerlink&quot; title=&quot;7_本地文件上传到Linux&quot;&gt;&lt;/a&gt;7_本地文件上传到Linux&lt;/h1&gt;&lt;h4 id=&quot;1-SecureFXPortabl</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>6_更改系统语言</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/6-%E6%9B%B4%E6%94%B9%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/6-%E6%9B%B4%E6%94%B9%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80/</id>
    <published>2021-02-17T10:37:25.000Z</published>
    <updated>2021-02-17T10:47:43.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-更改系统语言"><a href="#6-更改系统语言" class="headerlink" title="6_更改系统语言"></a>6_更改系统语言</h1><p>使用root权限进行更改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root </span><br><span class="line">password:输入密码(密码不可见)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 查看当前所有语言环境：</span></span><br><span class="line">locale -a</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 查看当前系统语言环境：</span></span><br><span class="line">echo $LANG</span><br></pre></td></tr></table></figure><p>编辑i18n配置文件:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;i18n</span><br></pre></td></tr></table></figure><p>进行如下配置并保存退出：esc+ :wq!</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183732.png"></p><p>重启系统后系统文字变成英文简体。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;6-更改系统语言&quot;&gt;&lt;a href=&quot;#6-更改系统语言&quot; class=&quot;headerlink&quot; title=&quot;6_更改系统语言&quot;&gt;&lt;/a&gt;6_更改系统语言&lt;/h1&gt;&lt;p&gt;使用root权限进行更改&lt;/p&gt;
&lt;figure class=&quot;highlight java</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>5_CentOs 7 连接外网的解决办法</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/5-CentOs-7-%E8%BF%9E%E6%8E%A5%E5%A4%96%E7%BD%91%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/5-CentOs-7-%E8%BF%9E%E6%8E%A5%E5%A4%96%E7%BD%91%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2021-02-17T10:36:26.000Z</published>
    <updated>2021-02-17T10:46:29.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-CentOs-7-连接外网的解决办法"><a href="#5-CentOs-7-连接外网的解决办法" class="headerlink" title="5_CentOs 7 连接外网的解决办法"></a>5_CentOs 7 连接外网的解决办法</h1><h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>在新安装 CentOs 7后，想要连接外网，发现不能上网，同时 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>出现如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name or service not known</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>网络未配置好 。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="一、选择-VMWare-的-NAT-模式"><a href="#一、选择-VMWare-的-NAT-模式" class="headerlink" title="一、选择 VMWare 的 NAT 模式"></a>一、选择 VMWare 的 NAT 模式</h3><h4 id="1）导航栏“编辑”-gt-“虚拟网络编辑器”-gt-NAT模式-gt-NAT设置"><a href="#1）导航栏“编辑”-gt-“虚拟网络编辑器”-gt-NAT模式-gt-NAT设置" class="headerlink" title="1）导航栏“编辑”-&gt;“虚拟网络编辑器” -&gt;NAT模式-&gt;NAT设置"></a>1）导航栏“编辑”-&gt;“虚拟网络编辑器” -&gt;NAT模式-&gt;NAT设置</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183642.png"></p><p>这一步主要是：记住NAT设置中的子网IP、子网掩码、网关IP三项，接下来配置文件主要是这三项。</p><h4 id="2）编辑网络配置文件"><a href="#2）编辑网络配置文件" class="headerlink" title="2）编辑网络配置文件"></a>2）编辑网络配置文件</h4><p>首先查看自己的网络使用的是哪个配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183643.png"></p><p>也可以使用下面命令查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183644.png"></p><p>然后编辑该文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183645.png"></p><p>保存退出！</p><blockquote><p>如何配置 Linux 的静态 IP，可参考我写的这篇博客</p></blockquote><h4 id="3）重启网络"><a href="#3）重启网络" class="headerlink" title="3）重启网络"></a>3）重启网络</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h4 id="4）测试"><a href="#4）测试" class="headerlink" title="4）测试"></a>4）测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183646.png"></p><p>说明可正常连接外网！！！</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;5-CentOs-7-连接外网的解决办法&quot;&gt;&lt;a href=&quot;#5-CentOs-7-连接外网的解决办法&quot; class=&quot;headerlink&quot; title=&quot;5_CentOs 7 连接外网的解决办法&quot;&gt;&lt;/a&gt;5_CentOs 7 连接外网的解决办法&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>4_设置主机名访问任意主机</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/4-%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%9C%BA%E5%90%8D%E8%AE%BF%E9%97%AE%E4%BB%BB%E6%84%8F%E4%B8%BB%E6%9C%BA/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/4-%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%9C%BA%E5%90%8D%E8%AE%BF%E9%97%AE%E4%BB%BB%E6%84%8F%E4%B8%BB%E6%9C%BA/</id>
    <published>2021-02-17T10:35:10.000Z</published>
    <updated>2021-02-17T10:47:22.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-设置主机名访问任意主机"><a href="#4-设置主机名访问任意主机" class="headerlink" title="4_设置主机名访问任意主机"></a>4_设置主机名访问任意主机</h1><p>修改之前，只能通过ip进行访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[admin@xj0927 myfile]$ ping 192.168.77.131</span><br><span class="line">PING 192.168.77.131 (192.168.77.131) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.77.131: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.156 ms</span><br><span class="line">64 bytes from 192.168.77.131: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.127 ms</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="ip与主机名映射"><a href="#ip与主机名映射" class="headerlink" title="ip与主机名映射"></a>ip与主机名映射</h2><h5 id="1-切换root"><a href="#1-切换root" class="headerlink" title="1)切换root"></a>1)切换root</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><h5 id="2-修改文件"><a href="#2-修改文件" class="headerlink" title="2)修改文件"></a>2)修改文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><h5 id="3-修改内容为"><a href="#3-修改内容为" class="headerlink" title="3)修改内容为:"></a>3)修改内容为:</h5><p>此时两个centos的ip和主机名分别为:</p><ul><li>192.168.77.130 xj0927</li><li>192.168.77.131 xj0928</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.77.130 xj0927</span><br><span class="line">192.168.77.131 xj0928</span><br><span class="line"></span><br><span class="line">若有其他ip和主机名也可继续添加...</span><br></pre></td></tr></table></figure><h5 id="4-测试"><a href="#4-测试" class="headerlink" title="4)测试"></a>4)测试</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[admin@xj0927 myfile]$ ping xj0928</span><br><span class="line">PING xj0928 (192.168.77.131) 56(84) bytes of data.</span><br><span class="line">64 bytes from xj0928 (192.168.77.131): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;15.4 ms</span><br><span class="line">64 bytes from xj0928 (192.168.77.131): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.207 ms</span><br><span class="line">64 bytes from xj0928 (192.168.77.131): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.202 ms</span><br><span class="line">....</span><br></pre></td></tr></table></figure><hr><h2 id="Linux修改主机名"><a href="#Linux修改主机名" class="headerlink" title="Linux修改主机名"></a>Linux修改主机名</h2><h5 id="1-切换到root用户"><a href="#1-切换到root用户" class="headerlink" title="1)切换到root用户"></a>1)切换到root用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><h5 id="2-修改文件-1"><a href="#2-修改文件-1" class="headerlink" title="2)修改文件"></a>2)修改文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br></pre></td></tr></table></figure><p>注意:该文件是只读文件，退出时使用:wq退出 </p><h5 id="3-重新连接"><a href="#3-重新连接" class="headerlink" title="3)重新连接"></a>3)重新连接</h5><p>重新连接后显示修改后的服务器名 </p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4-设置主机名访问任意主机&quot;&gt;&lt;a href=&quot;#4-设置主机名访问任意主机&quot; class=&quot;headerlink&quot; title=&quot;4_设置主机名访问任意主机&quot;&gt;&lt;/a&gt;4_设置主机名访问任意主机&lt;/h1&gt;&lt;p&gt;修改之前，只能通过ip进行访问&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>3_CentOs 7修改 IP 地址</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/3-CentOs-7%E4%BF%AE%E6%94%B9-IP-%E5%9C%B0%E5%9D%80/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/3-CentOs-7%E4%BF%AE%E6%94%B9-IP-%E5%9C%B0%E5%9D%80/</id>
    <published>2021-02-17T10:33:47.000Z</published>
    <updated>2021-02-17T10:34:37.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-CentOs-7修改-IP-地址"><a href="#3-CentOs-7修改-IP-地址" class="headerlink" title="3_CentOs 7修改 IP 地址"></a>3_CentOs 7修改 IP 地址</h1><h3 id="问题场景："><a href="#问题场景：" class="headerlink" title="问题场景："></a>问题场景：</h3><p>安装完 CentOs 7 后，使用 ifconfig 查看 ip，没有显示出来，xshell 也就连接不上，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Job for network.service failed because the control process exited with error</span><br></pre></td></tr></table></figure><p>此时，我们可以自己去配置静态 IP</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>首先，切换到 root 用户，查看自己需要修改哪个文件,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183404.png"></p><p>然后进入网络配置文件 network-scripts 目录下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd  &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;</span><br></pre></td></tr></table></figure><p>使用 ls 命令，列出该目录下的文件，其中<strong>“ifcfg-ens33”</strong>的文件，为我们需要修改的网络配置文件。</p><p>使用 <strong>vim 命令</strong>（vi命令也可以）,对文件进行配置，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ifcfg-ens33</span><br></pre></td></tr></table></figure><p>我们需要修改：</p><p><strong>BOOTPROTO=”static</strong>“也就是将 dhcp 改为 static ，</p><p><strong>ONBOOT=”yes”</strong> 意思是将网卡设置为 开机启用，</p><p>同时在最后添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IPADDR&#x3D;192.168.0.230 #静态IP  </span><br><span class="line"></span><br><span class="line">GATEWAY&#x3D;192.168.0.1 #默认网关  </span><br><span class="line"></span><br><span class="line">NETMASK&#x3D;255.255.255.0 #子网掩码  </span><br><span class="line"></span><br><span class="line">DNS1&#x3D;192.168.0.1 #DNS 配置  </span><br><span class="line"></span><br><span class="line">DNS2&#x3D;8.8.8.8     #谷歌地址</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183405.png"></p><p>保存退出！</p><p>重启网络，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><hr><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217183406.png"></p><p>如果报错，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Job for network.service failed because the control process exited with error code. See &quot;systemctl status network.service&quot; and &quot;journalctl -xe&quot; for details.</span><br></pre></td></tr></table></figure><p>可能是不小心改了一些文件，</p><p>解决办法：</p><p>在 /etc/sysconfig/network-scripts 目录下删除掉别的 ifcfg-xxx(只保留一个你网卡同名的文档)</p><p>再把 NetworkManager 停用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl disable NetworkManager</span><br></pre></td></tr></table></figure><p>保存之后再执行 systemctl restart network 就可以解决了 。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3-CentOs-7修改-IP-地址&quot;&gt;&lt;a href=&quot;#3-CentOs-7修改-IP-地址&quot; class=&quot;headerlink&quot; title=&quot;3_CentOs 7修改 IP 地址&quot;&gt;&lt;/a&gt;3_CentOs 7修改 IP 地址&lt;/h1&gt;&lt;h3 id=&quot;问</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>2_CentOs 6 修改 IP 地址</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/2_CentOs%206%20%E4%BF%AE%E6%94%B9%20IP%20%E5%9C%B0%E5%9D%80/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/2_CentOs%206%20%E4%BF%AE%E6%94%B9%20IP%20%E5%9C%B0%E5%9D%80/</id>
    <published>2021-02-17T10:33:46.000Z</published>
    <updated>2021-02-17T10:54:09.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux修改IP地址"><a href="#Linux修改IP地址" class="headerlink" title="Linux修改IP地址"></a>Linux修改IP地址</h1><h5 id="1-切换到root用户"><a href="#1-切换到root用户" class="headerlink" title="1)切换到root用户"></a>1)切换到root用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><h5 id="2-运行setup命令"><a href="#2-运行setup命令" class="headerlink" title="2)运行setup命令"></a>2)运行setup命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setup</span><br></pre></td></tr></table></figure><h5 id="3-选择Network-configuration"><a href="#3-选择Network-configuration" class="headerlink" title="3)选择Network configuration"></a>3)选择Network configuration</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216232416.png"></p><h5 id="4-选择Device-configuration"><a href="#4-选择Device-configuration" class="headerlink" title="4)选择Device configuration"></a>4)选择Device configuration</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216232417.png"></p><h5 id="5-选择eth0"><a href="#5-选择eth0" class="headerlink" title="5)选择eth0"></a>5)选择eth0</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216232418.png"></p><h5 id="6-按空格-去掉-进行设置即可"><a href="#6-按空格-去掉-进行设置即可" class="headerlink" title="6)按空格,去掉*,进行设置即可"></a>6)按空格,去掉*,进行设置即可</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216232419.png"></p><h5 id="7-重启网络服务"><a href="#7-重启网络服务" class="headerlink" title="7)重启网络服务"></a>7)重启网络服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h5 id="8-测试"><a href="#8-测试" class="headerlink" title="8)测试:"></a>8)测试:</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 查看地址是否为修改后的地址</span></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux修改IP地址&quot;&gt;&lt;a href=&quot;#Linux修改IP地址&quot; class=&quot;headerlink&quot; title=&quot;Linux修改IP地址&quot;&gt;&lt;/a&gt;Linux修改IP地址&lt;/h1&gt;&lt;h5 id=&quot;1-切换到root用户&quot;&gt;&lt;a href=&quot;#1-切换到r</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>1_Xsell连接Linux</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/1_Xsell%E8%BF%9E%E6%8E%A5Linux/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/1_Xsell%E8%BF%9E%E6%8E%A5Linux/</id>
    <published>2021-02-17T10:33:45.000Z</published>
    <updated>2021-02-17T10:54:29.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Xsell连接Linux"><a href="#Xsell连接Linux" class="headerlink" title="Xsell连接Linux"></a>Xsell连接Linux</h1><blockquote><p>来回切换虚拟机与Windows比较麻烦</p></blockquote><p>此时通过Xshell来连接</p><p><a href="https://pan.baidu.com/s/1yG6YFaSig4y1LcQ89FaV5A">百度云链接：提取码：ie6f </a></p><h5 id="1）查看Linux端口号"><a href="#1）查看Linux端口号" class="headerlink" title="1）查看Linux端口号"></a>1）查看Linux端口号</h5><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231615.png"  /><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231616.png"  /><h5 id="2）打开xshell，输入相关信息，建立连接"><a href="#2）打开xshell，输入相关信息，建立连接" class="headerlink" title="2）打开xshell，输入相关信息，建立连接"></a>2）打开xshell，输入相关信息，建立连接</h5><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231617.png"  /><h5 id="3-输入登录的Linux用户名"><a href="#3-输入登录的Linux用户名" class="headerlink" title="3)输入登录的Linux用户名"></a>3)输入登录的Linux用户名</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231618.png"></p><h5 id="4-输入登录的Linux密码"><a href="#4-输入登录的Linux密码" class="headerlink" title="4)输入登录的Linux密码"></a>4)输入登录的Linux密码</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231619.jpg"></p><h5 id="5-连接成功"><a href="#5-连接成功" class="headerlink" title="5)连接成功"></a>5)连接成功</h5><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231620.png"  /><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Xsell连接Linux&quot;&gt;&lt;a href=&quot;#Xsell连接Linux&quot; class=&quot;headerlink&quot; title=&quot;Xsell连接Linux&quot;&gt;&lt;/a&gt;Xsell连接Linux&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;来回切换虚拟机与Windows比较</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
    <category term="Xshell" scheme="http://jiangbk.top/tags/Xshell/"/>
    
  </entry>
  
  <entry>
    <title>0_在VM虚拟机下安装-Linux</title>
    <link href="http://jiangbk.top/2021/02/17/Linux/0_%E5%9C%A8VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8B%E5%AE%89%E8%A3%85-Linux/"/>
    <id>http://jiangbk.top/2021/02/17/Linux/0_%E5%9C%A8VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8B%E5%AE%89%E8%A3%85-Linux/</id>
    <published>2021-02-17T10:33:44.000Z</published>
    <updated>2021-02-17T10:54:47.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-VM-虚拟机下安装-Linux"><a href="#在-VM-虚拟机下安装-Linux" class="headerlink" title="在 VM 虚拟机下安装 Linux"></a>在 VM 虚拟机下安装 Linux</h1><h2 id="VM虚拟机安装"><a href="#VM虚拟机安装" class="headerlink" title="VM虚拟机安装"></a>VM虚拟机安装</h2><p><a href="https://pan.baidu.com/s/1xOLBGDqy2SmSI204AoIj7g">百度云链接：提取码：o6e6</a></p><p>安装完成后…查看是否有这两项</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231011.png"></p><hr><h2 id="安装Linux"><a href="#安装Linux" class="headerlink" title="安装Linux"></a>安装Linux</h2><h5 id="1）-Create-a-New-Virtual-Machine-新建虚拟机"><a href="#1）-Create-a-New-Virtual-Machine-新建虚拟机" class="headerlink" title="1） Create a New Virtual Machine (新建虚拟机)"></a>1） Create a New Virtual Machine (新建虚拟机)</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231012.png"></p><h5 id="2）选择Typical-典型"><a href="#2）选择Typical-典型" class="headerlink" title="2）选择Typical(典型)"></a>2）选择Typical(典型)</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231013.png"></p><h5 id="3）稍后选择-Linux-CentOS安装镜像"><a href="#3）稍后选择-Linux-CentOS安装镜像" class="headerlink" title="3）稍后选择 Linux CentOS安装镜像"></a>3）稍后选择 Linux CentOS安装镜像</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231014.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231015.png"></p><h5 id="4）选择CentOS安装目录"><a href="#4）选择CentOS安装目录" class="headerlink" title="4）选择CentOS安装目录"></a>4）选择CentOS安装目录</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231016.png"></p><h5 id="5）给系统指定最大磁盘空间-不建议小于5G"><a href="#5）给系统指定最大磁盘空间-不建议小于5G" class="headerlink" title="5）给系统指定最大磁盘空间(不建议小于5G)"></a>5）给系统指定最大磁盘空间(不建议小于5G)</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231017.png"></p><h5 id="6）完成"><a href="#6）完成" class="headerlink" title="6）完成"></a>6）完成</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231018.png"></p><h5 id="7）开始Server安装"><a href="#7）开始Server安装" class="headerlink" title="7）开始Server安装"></a>7）开始Server安装</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231019.png"></p><h5 id="8）开启虚拟机"><a href="#8）开启虚拟机" class="headerlink" title="8）开启虚拟机"></a>8）开启虚拟机</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231020.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231021.jpg"></p><h5 id="小插曲："><a href="#小插曲：" class="headerlink" title="小插曲："></a>小插曲：</h5><p>若第一次安装,此时可能出现下列问题</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231022.jpg"></p><p>解决措施:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.重启电脑进入 BIOS，既是按F1 或 F2、或F5、或delete等..不同品牌进入不同。</span><br><span class="line">2.找到菜单 Advanced   进入cpu configuration </span><br><span class="line">3.将 intel virtual technology 设置为 Enable，f10，然后保存退出；</span><br><span class="line">  或者是将SVM Mode 设置为Enable</span><br><span class="line">3.重新打开虚拟机即可。</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231023.png"></p><h5 id="9）设置语言"><a href="#9）设置语言" class="headerlink" title="9）设置语言"></a>9）设置语言</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231024.png"></p><h5 id="10）键盘选择"><a href="#10）键盘选择" class="headerlink" title="10）键盘选择"></a>10）键盘选择</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231025.png"></p><h5 id="11）基本储存设备"><a href="#11）基本储存设备" class="headerlink" title="11）基本储存设备"></a>11）基本储存设备</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231026.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231027.png"></p><h5 id="12）设置主机名"><a href="#12）设置主机名" class="headerlink" title="12）设置主机名"></a>12）设置主机名</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231028.png"></p><h5 id="13）选择时区"><a href="#13）选择时区" class="headerlink" title="13）选择时区"></a>13）选择时区</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231029.png"></p><h5 id="14）设置root账户"><a href="#14）设置root账户" class="headerlink" title="14）设置root账户"></a>14）设置root账户</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231030.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231031.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231032.jpg"></p><h5 id="15）安装中…"><a href="#15）安装中…" class="headerlink" title="15）安装中…"></a>15）安装中…</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231033.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231034.png"></p><h5 id="16）创建普通用户"><a href="#16）创建普通用户" class="headerlink" title="16）创建普通用户"></a>16）创建普通用户</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231035.png"></p><h5 id="17）设置时间"><a href="#17）设置时间" class="headerlink" title="17）设置时间"></a>17）设置时间</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231036.jpg"></p><h5 id="18）登录"><a href="#18）登录" class="headerlink" title="18）登录"></a>18）登录</h5><p>![](0_在 VM 虚拟机下安装 Linux/Linux/images/登录.jpg)</p><h5 id="19）网卡设置-非必须"><a href="#19）网卡设置-非必须" class="headerlink" title="19）网卡设置(非必须)"></a>19）网卡设置(非必须)</h5><p><img src= "/img/loading.gif" data-lazy-src="../../../Typora_%E5%B7%A5%E5%85%B7%E7%B1%BB/Linux/images/%E7%BD%91%E7%BB%9C%E9%80%89%E6%8B%A9.jpg"></p><p><strong>nat方式</strong>，每次换网络的情况下，<strong>IP不会变化。</strong>跨网段访问。<br><strong>桥接模式</strong>，每次换网络的情况下，<strong>IP都会变化。优势是和主机一个段，相对更快。</strong></p><p>上面是开发环境，下面是线上环境。 </p><hr><h2 id="克隆Linux"><a href="#克隆Linux" class="headerlink" title="克隆Linux"></a>克隆Linux</h2><p>发现一步一步安装确实挺繁琐的，可以选择直接克隆</p><h5 id="1）克隆"><a href="#1）克隆" class="headerlink" title="1）克隆"></a>1）克隆</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231037.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231038.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231039.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231040.png"></p><h5 id="2）克隆路径"><a href="#2）克隆路径" class="headerlink" title="2）克隆路径"></a>2）克隆路径</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231041.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231042.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231043.png"></p><h5 id="3）完成克隆后多台服务器："><a href="#3）完成克隆后多台服务器：" class="headerlink" title="3）完成克隆后多台服务器："></a>3）完成克隆后多台服务器：</h5><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210216231044.jpg"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在-VM-虚拟机下安装-Linux&quot;&gt;&lt;a href=&quot;#在-VM-虚拟机下安装-Linux&quot; class=&quot;headerlink&quot; title=&quot;在 VM 虚拟机下安装 Linux&quot;&gt;&lt;/a&gt;在 VM 虚拟机下安装 Linux&lt;/h1&gt;&lt;h2 id=&quot;VM虚拟机</summary>
      
    
    
    
    <category term="Linux" scheme="http://jiangbk.top/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://jiangbk.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>4_redis缓存过期淘汰策略</title>
    <link href="http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/4-redis%E7%BC%93%E5%AD%98%E8%BF%87%E6%9C%9F%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
    <id>http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/4-redis%E7%BC%93%E5%AD%98%E8%BF%87%E6%9C%9F%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</id>
    <published>2021-02-17T10:23:15.000Z</published>
    <updated>2021-02-17T10:24:02.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-redis缓存过期淘汰策略"><a href="#4-redis缓存过期淘汰策略" class="headerlink" title="4_redis缓存过期淘汰策略"></a>4_redis缓存过期淘汰策略</h1><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><blockquote><p>问题1：生产上你们的redis内存设置多少?</p></blockquote><blockquote><p>问题2：如何配置、修改redis的内存大小？</p></blockquote><blockquote><p>问题3：redis清理内存的方式?定期删除和惰性删除了解过吗？</p></blockquote><blockquote><p>问题4：redis缓存淘汰策略？</p></blockquote><blockquote><p>问题5：redis的LRu了解过吗?可否手写一个LRu算法？</p></blockquote><hr><p>redis默认内存多少？在哪里查看? 如何设置修改?</p><h4 id="查看Redis最大占用内存"><a href="#查看Redis最大占用内存" class="headerlink" title="查看Redis最大占用内存"></a>查看Redis最大占用内存</h4><blockquote><p>打开redis配置文件，设置maxmemory参数，maxmemory是bytes字节类型，注意转换。 </p></blockquote><hr><h4 id="redis默认内存多少可以用？"><a href="#redis默认内存多少可以用？" class="headerlink" title="redis默认内存多少可以用？"></a>redis默认内存多少可以用？</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182352.png"></p><hr><h4 id="一般生产上你如何配置？"><a href="#一般生产上你如何配置？" class="headerlink" title="一般生产上你如何配置？"></a>一般生产上你如何配置？</h4><blockquote><p>一般推荐Redis设置内存为最大物理内存的<code>四分之三</code>，也就是0.75</p></blockquote><hr><h4 id="如何修改redis内存设置"><a href="#如何修改redis内存设置" class="headerlink" title="如何修改redis内存设置"></a>如何修改redis内存设置</h4><p>通过修改文件配置：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182353.png"></p><p>通过命令修改：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182354.png"></p><hr><h4 id="什么命令查看redis内存使用情况"><a href="#什么命令查看redis内存使用情况" class="headerlink" title="什么命令查看redis内存使用情况?"></a>什么命令查看redis内存使用情况?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info memory</span><br></pre></td></tr></table></figure><hr><h4 id="真要打满了会怎么样-如果Redis内存使用超出了设置的最大值会怎样"><a href="#真要打满了会怎么样-如果Redis内存使用超出了设置的最大值会怎样" class="headerlink" title="真要打满了会怎么样? 如果Redis内存使用超出了设置的最大值会怎样?"></a>真要打满了会怎么样? 如果Redis内存使用超出了设置的最大值会怎样?</h4><p>改改配置，故意把最大值设为1个byte试试</p><blockquote><p>报<code>OOM</code></p></blockquote><p>设置了maxmemory的选项，假如redis内存使用达到上限</p><p>没有加上过期时间就会导致数据写满maxmemory 为了避免类似情况，引出下一章内存淘汰策略</p><hr><h2 id="redis缓存淘汰策略"><a href="#redis缓存淘汰策略" class="headerlink" title="redis缓存淘汰策略"></a>redis缓存淘汰策略</h2><h3 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h3><p>如果一个键是过期的，那它到了过期时间之后是不是马上就从内存中被被删除呢??如果回答yes，你自己走还是面试官送你?如果不是，那过期后到底什么时候被删除呢?？是个什么操作?</p><h4 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h4><blockquote><p>总结：<code>对CPU不友好</code>，用处理器性能换取存储空间（拿时间换空间）</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182355.png"></p><hr><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><blockquote><p>总结：<code>对memory不友好</code>，用存储空间换取处理器性能（拿空间换时间)</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182356.png"></p><hr><h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><blockquote><p>定期<code>抽样key</code>，判断是否过期，但存在漏网之鱼</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182357.png"></p><hr><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182358.png"></p><h3 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h3><p>种类：(redis6.0.8版本)</p><ul><li>noeviction: 不会驱逐任何key</li><li>allkeys-lru: 对所有key使用LRU算法进行删除</li><li>volatile-lru: 对所有设置了过期时间的key使用LRU算法进行删除</li><li>allkeys-random: 对所有key随机删除</li><li>volatile-random: 对所有设置了过期时间的key随机删除</li><li>volatile-ttl: 删除马上要过期的key</li><li>allkeys-lfu: 对所有key使用LFU算法进行删除</li><li>volatile-lfu: 对所有设置了过期时间的key使用LFU算法进行删除</li></ul><hr><p>2个维度：</p><ul><li>过期键中筛选</li><li>所有键中筛选</li></ul><p>4个方面：</p><ul><li>LRU</li><li>LFU</li><li>random</li><li>ttl</li></ul><p>组成8个选项</p><hr><blockquote><p>你平时用哪一种？</p><p>allkeys-lru: 对所有key使用LRU算法进行删除</p></blockquote><blockquote><p>如何配置、修改？</p><p>方式一：使用配置文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182359.png"></p><hr><p>方式二：使用命令</p><p>config set maxmemory-policy allkeys-lru</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4-redis缓存过期淘汰策略&quot;&gt;&lt;a href=&quot;#4-redis缓存过期淘汰策略&quot; class=&quot;headerlink&quot; title=&quot;4_redis缓存过期淘汰策略&quot;&gt;&lt;/a&gt;4_redis缓存过期淘汰策略&lt;/h1&gt;&lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="面试汇总" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/"/>
    
    <category term="大厂面试第三季_周阳老师" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/"/>
    
    <category term="Redis" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/"/>
    
    
    <category term="Redis" scheme="http://jiangbk.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>3_分布式锁</title>
    <link href="http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/3-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/3-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2021-02-17T10:21:38.000Z</published>
    <updated>2021-02-17T10:23:02.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-分布式锁"><a href="#3-分布式锁" class="headerlink" title="3_分布式锁"></a>3_分布式锁</h1><h2 id="分布式锁的面试题"><a href="#分布式锁的面试题" class="headerlink" title="分布式锁的面试题"></a>分布式锁的面试题</h2><blockquote><p>问题1：Redis除了拿来做缓存，你还见过基于Redis的什么用法?</p><p>答：传统五大数据类型的落地应用；做分布式锁</p></blockquote><blockquote><p>问题2：Redis做分布式锁的时候有需要注意的问题?</p></blockquote><blockquote><p>问题3：如果是Redis是单点部署的，会带来什么问题?</p><p>​            那你准备怎么解决单点问题呢?</p></blockquote><blockquote><p>问题4：集群模式下，比如主从模式，有没有什么问题呢?</p></blockquote><blockquote><p>问题5：那你简单的介绍一下Redlock吧?你简历上写redisson，你谈谈</p></blockquote><blockquote><p>问题6：Redis分布式锁如何续期?看门狗知道吗?</p></blockquote><hr><h2 id="Base案例-boot-redis"><a href="#Base案例-boot-redis" class="headerlink" title="Base案例(boot+redis)"></a>Base案例(boot+redis)</h2><blockquote><p>使用场景：<font color='red'>多个服务间保证同一时刻同一时间段内同一用户只能有一个请求(防止关键业务出现并发攻击)</font></p></blockquote><h4 id="1、建Module"><a href="#1、建Module" class="headerlink" title="1、建Module"></a>1、建Module</h4><blockquote><p>两个微服务：boot_redis01、boot_redis02</p></blockquote><h4 id="2、改POM"><a href="#2、改POM" class="headerlink" title="2、改POM"></a>2、改POM</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hhf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>boot_redis01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="3、建YML"><a href="#3、建YML" class="headerlink" title="3、建YML"></a>3、建YML</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">1111</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379 </span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#连接池最大连接数（使用负值表示没有限制）默认8</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="comment">#连接池最大阻塞等待时间（使用负值表示没有限制）默认-1</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment">#连接池中的最大空闲连接默认8</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="comment">#连接池中的最小空闲连接默认0</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0 </span></span><br></pre></td></tr></table></figure><hr><h4 id="4、启动类"><a href="#4、启动类" class="headerlink" title="4、启动类"></a>4、启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application01.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="5、config"><a href="#5、config" class="headerlink" title="5、config"></a>5、config</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证不是序列化后的乱码配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="6、controller"><a href="#6、controller" class="headerlink" title="6、controller"></a>6、controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h4><p>访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:1111&#x2F;buy_goods</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;localhost:2222&#x2F;buy_goods</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182252.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182253.jpg"></p><p>正常访问！</p><hr><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><h3 id="1-单机版没加锁"><a href="#1-单机版没加锁" class="headerlink" title="1.单机版没加锁"></a>1.单机版没加锁</h3><blockquote><p>没有加锁，并发下数字不对，出现<code>超卖现象</code></p></blockquote><p>思考：加synchronized？加ReentrantLock？还是都可以?</p><p>答 ：视业务需求而定。synchronized加锁的话会一直进行阻塞直到获得锁，而ReentrantLock可以使用tryLock()设置获取锁的时间，如果获取不到锁可以中断做其它事情。</p><hr><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p><font color='red'>修改为2.0版本：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-nginx分布式微服务架构"><a href="#2-nginx分布式微服务架构" class="headerlink" title="2.nginx分布式微服务架构"></a>2.nginx分布式微服务架构</h3><blockquote><p> 分布式部署后，单机锁还是出现超卖现象，需要分布式锁</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182254.png"></p><hr><h4 id="Nginx配置负载均衡"><a href="#Nginx配置负载均衡" class="headerlink" title="Nginx配置负载均衡"></a>Nginx配置负载均衡</h4><p>我这里使用的docker配置Nginx实现负载均衡</p><p>详细参考：<a href="https://blog.csdn.net/XJ0927/article/details/109635711">Dokcer部署Nginx</a> 与 <a href="https://blog.csdn.net/XJ0927/article/details/109501188">Nginx实现负载均衡</a></p><hr><p>下面进行测试</p><p>手动方式：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182255.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182256.png"></p><p>可以发现可以轮询访问微服务。</p><hr><p>高并发模拟：模拟2000个线程同时访问微服务</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182257.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182258.png"></p><hr><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182259.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182300.png"></p><p>出现重复消费问题！</p><hr><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><blockquote><p>上redis分布式锁<code>setnx</code>：Redis具有极高的性能，且其命令对分布式锁支持友好，借助SET命令即可实现加锁处理. </p></blockquote><p>修改为3.0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_LOCK_KEY = <span class="string">&quot;lock&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">    <span class="comment">//setIfAbsent() 就是如果不存在就新建</span></span><br><span class="line">    Boolean lockFlag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK_KEY, value);<span class="comment">//setnx</span></span><br><span class="line">    <span class="keyword">if</span> (!lockFlag) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;抢锁失败，┭┮﹏┭┮&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            stringRedisTemplate.delete(REDIS_LOCK_KEY);<span class="comment">//释放锁</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-程序异常"><a href="#3-程序异常" class="headerlink" title="3.程序异常"></a>3.程序异常</h3><blockquote><p><font color='red'>出异常的话，可能无法释放锁， 必须要在代码层面finally释放锁 </font></p></blockquote><p>加锁解锁，lock/unlock必须同时出现并保证调用</p><h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h4><p>修改为4.0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//setIfAbsent() 就是如果不存在就新建           </span></span><br><span class="line">        Boolean lockFlag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK_KEY, value);<span class="comment">//setnx   </span></span><br><span class="line">        <span class="keyword">if</span> (!lockFlag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抢锁失败，┭┮﹏┭┮&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(REDIS_LOCK_KEY);<span class="comment">//释放锁 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-微服务宕机"><a href="#4-微服务宕机" class="headerlink" title="4.微服务宕机"></a>4.微服务宕机</h3><blockquote><p><font color='red'>部署了微服务jar包的机器挂了，代码层面根本没有走到finally这块， 没办法保证解锁，这个key没有被删除，需要加入一个过期时间限定key</font></p></blockquote><h4 id="解决办法-3"><a href="#解决办法-3" class="headerlink" title="解决办法"></a>解决办法</h4><p>修改为5.0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//setIfAbsent() 就是如果不存在就新建 </span></span><br><span class="line">        Boolean lockFlag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK_KEY, value);<span class="comment">//setnx   </span></span><br><span class="line">        stringRedisTemplate.expire(REDIS_LOCK_KEY, <span class="number">10L</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!lockFlag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抢锁失败，┭┮﹏┭┮&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(REDIS_LOCK_KEY);<span class="comment">//释放锁 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-过期时间设置不能保证原子性"><a href="#5-过期时间设置不能保证原子性" class="headerlink" title="5.过期时间设置不能保证原子性"></a>5.过期时间设置不能保证原子性</h3><blockquote><p><font color='red'>设置key+过期时间分开了，必须要合并成一行具备原子性</font></p></blockquote><h4 id="解决办法-4"><a href="#解决办法-4" class="headerlink" title="解决办法"></a>解决办法</h4><p>修改为6.0：换重载方法，同时设置过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//setIfAbsent() 就是如果不存在就新建</span></span><br><span class="line">        Boolean lockFlag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK_KEY, value, <span class="number">10L</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!lockFlag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抢锁失败，┭┮﹏┭┮&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(REDIS_LOCK_KEY);<span class="comment">//释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6-误释放锁"><a href="#6-误释放锁" class="headerlink" title="6.误释放锁"></a>6.误释放锁</h3><blockquote><p><font color='red'>张冠李戴，删除了别人的锁</font></p></blockquote><h4 id="解决办法-5"><a href="#解决办法-5" class="headerlink" title="解决办法"></a>解决办法</h4><p>修改为7.0版本：对要删除的锁进行判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//setIfAbsent() 就是如果不存在就新建</span></span><br><span class="line">        Boolean lockFlag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK_KEY, value, <span class="number">10L</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!lockFlag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抢锁失败，┭┮﹏┭┮&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value.equalsIgnoreCase(stringRedisTemplate.opsForValue().get(REDIS_LOCK_KEY))) &#123;</span><br><span class="line">            stringRedisTemplate.delete(REDIS_LOCK_KEY);<span class="comment">//释放锁    </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="7-释放锁不是原子性"><a href="#7-释放锁不是原子性" class="headerlink" title="7.释放锁不是原子性"></a>7.释放锁不是原子性</h3><blockquote><p><font color='red'>finally块的判断+del删除操作不是原子性的</font></p></blockquote><h4 id="解决办法1：使用Redis事务"><a href="#解决办法1：使用Redis事务" class="headerlink" title="解决办法1：使用Redis事务"></a>解决办法1：使用Redis事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//setIfAbsent() 就是如果不存在就新建</span></span><br><span class="line">        Boolean lockFlag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK_KEY, value, <span class="number">10L</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!lockFlag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抢锁失败，┭┮﹏┭┮&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            stringRedisTemplate.watch(REDIS_LOCK_KEY); <span class="comment">//加事务，乐观锁     </span></span><br><span class="line">            <span class="keyword">if</span> (value.equalsIgnoreCase(stringRedisTemplate.opsForValue().get(REDIS_LOCK_KEY))) &#123;</span><br><span class="line">                stringRedisTemplate.setEnableTransactionSupport(<span class="keyword">true</span>);</span><br><span class="line">                stringRedisTemplate.multi();<span class="comment">//开始事务      </span></span><br><span class="line">                stringRedisTemplate.delete(REDIS_LOCK_KEY);</span><br><span class="line">                List&lt;Object&gt; list = stringRedisTemplate.exec();</span><br><span class="line">                <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;  <span class="comment">//如果等于null，就是没有删掉，删除失败，再回去while循环那再重新执行删除                     </span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;                </span><br><span class="line">            <span class="comment">//如果删除成功，释放监控器，并且break跳出当前循环   </span></span><br><span class="line">            stringRedisTemplate.unwatch();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="解决办法2：使用Lua脚本"><a href="#解决办法2：使用Lua脚本" class="headerlink" title="解决办法2：使用Lua脚本"></a>解决办法2：使用Lua脚本</h4><p>Redis可以通过<code>eval命令</code>保证代码执行的原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">20</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, <span class="string">&quot;ip&quot;</span>, <span class="number">6379</span>, <span class="number">100000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != jedisPool) &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Jedispool is not ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//setIfAbsent() 就是如果不存在就新建</span></span><br><span class="line">        Boolean lockFlag = stringRedisTemplate.opsForValue().setIfAbsent(REDIS_LOCK_KEY, value, <span class="number">10L</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (!lockFlag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;抢锁失败，┭┮﹏┭┮&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">            <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Jedis jedis = RedisUtils.getJedis();</span><br><span class="line">        String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1]&quot;</span> + <span class="string">&quot;then &quot;</span> + <span class="string">&quot;return redis.call(&#x27;del&#x27;, KEYS[1])&quot;</span> + <span class="string">&quot;else &quot;</span> + <span class="string">&quot;  return 0 &quot;</span> + <span class="string">&quot;end&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object result = jedis.eval(script, Collections.singletonList(REDIS_LOCK_KEY), Collections.singletonList(value));</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(result.toString())) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;------del REDIS_LOCK_KEY success&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;------del REDIS_LOCK_KEY error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != jedis) &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="8-redis续期问题"><a href="#8-redis续期问题" class="headerlink" title="8.redis续期问题"></a>8.redis续期问题</h3><blockquote><p><font color='red'>确保redisLock过期时间大于业务执行时间的问题</font></p></blockquote><p>集群+CAP对比zookeeper</p><ul><li>Redis：AP：redis异步复制造成的锁丢失， 比如:主节点没来的及把刚刚set进来这条数据给从节点，就挂了。此时如果集群模式下，就得上Redisson来解决</li><li>Zookeeper：CP</li></ul><hr><h4 id="解决办法-6"><a href="#解决办法-6" class="headerlink" title="解决办法"></a>解决办法</h4><p>redis集群环境下，我们自己写的也不OK, 直接上RedLock之Redisson落地实现</p><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String redisHost;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Redisson <span class="title">redisson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://&quot;</span> + redisHost + <span class="string">&quot;:6379&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> (Redisson) Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Redisson redisson;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">    RLock redissonLock = redisson.getLock(REDIS_LOCK_KEY);</span><br><span class="line">    redissonLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        redissonLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="9-完善"><a href="#9-完善" class="headerlink" title="9.完善"></a>9.完善</h3><p>可能出现错误：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182301.png"></p><p>是在并发多的时候就可能会遇到这种错误，可能会被重新抢占</p><p>不见得当前这个锁的状态还是在锁定，并且本线程持有</p><h4 id="解决办法-7"><a href="#解决办法-7" class="headerlink" title="解决办法"></a>解决办法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/buy_goods&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buy_Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = UUID.randomUUID().toString() + Thread.currentThread().getName();</span><br><span class="line">    RLock redissonLock = redisson.getLock(REDIS_LOCK_KEY);</span><br><span class="line">    redissonLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String result = stringRedisTemplate.opsForValue().get(<span class="string">&quot;goods:001&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> goodsNumber = result == <span class="keyword">null</span> ? <span class="number">0</span> : Integer.parseInt(result);</span><br><span class="line">        <span class="keyword">if</span> (goodsNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> realNumber = goodsNumber - <span class="number">1</span>;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(<span class="string">&quot;goods:001&quot;</span>, realNumber + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你已经成功秒杀商品，此时还剩余：&quot;</span> + realNumber + <span class="string">&quot;件&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;商品已经售罄/活动结束/调用超时，欢迎下次光临&quot;</span> + <span class="string">&quot;\t 服务器端口: &quot;</span> + serverPort;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//还在持有锁的状态，并且是当前线程持有的锁再解锁   </span></span><br><span class="line">        <span class="keyword">if</span> (redissonLock.isLocked() &amp;&amp; redissonLock.isHeldByCurrentThread()) &#123;</span><br><span class="line">            redissonLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>synchronized  单机版oK，上分布式</p><p>===&gt; nginx分布式微服务 单机锁不行</p><p>===&gt;取消单机锁  上redis分布式锁setnx</p><p>===&gt; 只加了锁，没有释放锁，  出异常的话，可能无法释放锁，必须要在代码层面finally释放锁 </p><p>===&gt; 宕机了，部署了微服务代码层面根本没有走到finally这块，没办法保证解锁，这个key没有被删除，需要有lockKey的过期时间设定</p><p>===&gt; 为redis的分布式锁key，增加过期时间此外，还必须要setnx+过期时间必须同一行的原子性操作 </p><p>===&gt;必须规定只能自己删除自己的锁，你不能把别人的锁删除了,防止张冠李戴，1删2,2删3</p><p>===&gt; lua或者事务 </p><p>===&gt; redis集群环境下，我们自己写的也不OK直接上RedLock之Redisson落地实现</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3-分布式锁&quot;&gt;&lt;a href=&quot;#3-分布式锁&quot; class=&quot;headerlink&quot; title=&quot;3_分布式锁&quot;&gt;&lt;/a&gt;3_分布式锁&lt;/h1&gt;&lt;h2 id=&quot;分布式锁的面试题&quot;&gt;&lt;a href=&quot;#分布式锁的面试题&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="面试汇总" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/"/>
    
    <category term="大厂面试第三季_周阳老师" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/"/>
    
    <category term="Redis" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/"/>
    
    
    <category term="Redis" scheme="http://jiangbk.top/tags/Redis/"/>
    
    <category term="分布式锁" scheme="http://jiangbk.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>2_redis传统五大基本类型的落地应用</title>
    <link href="http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/2-redis%E4%BC%A0%E7%BB%9F%E4%BA%94%E5%A4%A7%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%90%BD%E5%9C%B0%E5%BA%94%E7%94%A8/"/>
    <id>http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/2-redis%E4%BC%A0%E7%BB%9F%E4%BA%94%E5%A4%A7%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%90%BD%E5%9C%B0%E5%BA%94%E7%94%A8/</id>
    <published>2021-02-17T10:19:35.000Z</published>
    <updated>2021-02-17T10:21:19.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-redis传统五大基本类型的落地应用"><a href="#2-redis传统五大基本类型的落地应用" class="headerlink" title="2_redis传统五大基本类型的落地应用"></a>2_redis传统五大基本类型的落地应用</h1><p>官网命令大全网址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.redis.cn&#x2F;commands.html</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182057.png"></p><hr><p>8大类型：</p><ol><li>String(字符类型)</li><li>Hash(散列类型)</li><li>List(列表类型)</li><li>Set(集合类型)</li><li>SortedSet(有序集合类型，简称zset)</li><li>Bitmap(位图)</li><li>HyperLogLog(统计)</li><li>GEO（地理）</li></ol><hr><p><strong>备注：</strong> </p><ul><li><font color='red'>命令不区分大小写，而key是区分大小写的</font></li><li><font color='red'>help @类型名词</font></li></ul><hr><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 最常用</span></span><br><span class="line">set key value</span><br><span class="line">get key</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 同时设置/获取多个键值（m就是more的意思）</span></span><br><span class="line">MSET key value [key value ....]</span><br><span class="line">MGET key [key ....]</span><br></pre></td></tr></table></figure><hr><h4 id="数值增减"><a href="#数值增减" class="headerlink" title="数值增减"></a>数值增减</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 递增数字</span></span><br><span class="line">INCR key</span><br><span class="line"><span class="section"># 增加指定的整数</span></span><br><span class="line">INCRBY key increment</span><br><span class="line"></span><br><span class="line"><span class="section"># 递减数值</span></span><br><span class="line">DECR key</span><br><span class="line"><span class="section"># 减少指定的整数</span></span><br><span class="line">DECRBY key decrement</span><br></pre></td></tr></table></figure><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 获取字符串长度</span></span><br><span class="line">STRLEN key</span><br></pre></td></tr></table></figure><hr><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a><font color='red'>分布式锁</font></h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># key不存在时则创建,存在则不创建</span></span><br><span class="line">setnx key value</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># </span></span><br><span class="line">set key value [<span class="string">Ex seconds</span>][<span class="symbol">PX milliseconds</span>][<span class="string">NX|XX</span>]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182058.png"></p><hr><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><font color='red'>应用场景</font></h4><blockquote><p><font color='red'>商品编号、订单号采用INCR命令生成：</font></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182059.png"></p><p>类似：点赞数+1就使用incr，踩数-1就使用decr</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182100.png"></p><blockquote><p><font color='red'>是否喜欢的文章</font></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182101.png"></p><hr><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><blockquote><p>对应Java中的结构：<font color='red'>Map&lt;String,Map&lt;Object,object&gt;&gt;</font></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一次设置一个字段值</span></span><br><span class="line">HSET key field value</span><br><span class="line"><span class="section"># 一次获取一个字段值</span></span><br><span class="line">HGET key field</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一次设置多个字段值</span></span><br><span class="line">HMSET key field value [field value ...]</span><br><span class="line"><span class="section"># 一次获取多个字段值</span></span><br><span class="line">HMGET key field [field ....]</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取所有字段值</span></span><br><span class="line">hgetall key</span><br><span class="line"><span class="section"># 获取某个key内的全部数量</span></span><br><span class="line">hlen key</span><br><span class="line"><span class="section"># 删除某个key的一个字段</span></span><br><span class="line">hdel key field</span><br></pre></td></tr></table></figure><hr><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a><font color='red'>应用场景</font></h4><blockquote><p><font color='red'>购物车早期，当前小中厂可用：</font></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182102.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182103.png"></p><p>实现方案：以用户id作为hash结构中的key，新增商品时使用hset为用户key增加一个字段，字段值就是商品数量，同样如果再增加一件商品，就再添加一个field，而如果对添加的商品进行数量+1就使用hincrby增加相应的数量，需要全选商品时，就使用hgetall，购物车商品的数量显示就使用hlen。</p><hr><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><blockquote><p>其实就是一个双向链表：有序可重复</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 向列表左边添加元素</span></span><br><span class="line">LPUSH key value [value ...]</span><br><span class="line"></span><br><span class="line"><span class="section"># 向列表右边添加元素</span></span><br><span class="line">RPUSH key value [value ....]</span><br><span class="line"></span><br><span class="line"><span class="section"># 查看列表</span></span><br><span class="line">LRANGE key start stop</span><br><span class="line"><span class="section"># 获取列表中元素的个数</span></span><br><span class="line">LLEN key</span><br></pre></td></tr></table></figure><hr><h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a><font color='red'>应用场景</font></h4><blockquote><p><font color='red'>微信文章订阅公众号：</font></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182104.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182105.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182106.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182107.png"></p><hr><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><blockquote><p>无序不可重复</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 添加元素</span></span><br><span class="line">SADD key member[member ...]</span><br><span class="line"></span><br><span class="line"><span class="section"># 删除元素</span></span><br><span class="line">SREM key member [member ...]</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取集合中的所有元素</span></span><br><span class="line">SMEMBERS key</span><br><span class="line"></span><br><span class="line"><span class="section"># 判断元素是否在集合中</span></span><br><span class="line">SISMEMBER key member</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取集合中的元素个数</span></span><br><span class="line">SCARD key</span><br></pre></td></tr></table></figure><hr><p>随机取一个元素</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 从集合中随机弹出一个元素，元素不删除</span></span><br><span class="line">SRANDMEMBER key [数字]</span><br><span class="line"></span><br><span class="line"><span class="section"># 从集合中随机弹出一个元素，出一个删一个</span></span><br><span class="line">SPOP key[数字]</span><br></pre></td></tr></table></figure><hr><p>集合运算</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 集合的差集运算A-B：属于A但不属于B的元素构成的集合</span></span><br><span class="line">SDIFF key [key ...]</span><br><span class="line"></span><br><span class="line"><span class="section"># 集合的交集运算A∩B：属于A同时也属于B的共同拥有的元素构成的集合</span></span><br><span class="line">SINTER key [key ...]</span><br><span class="line"></span><br><span class="line"><span class="section"># 集合的并集运算AUB：属于A或者属于B的元素合并后的集合</span></span><br><span class="line">SUNION key [key ...]</span><br></pre></td></tr></table></figure><hr><h4 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a><font color='red'>应用场景</font></h4><blockquote><p><font color='red'>微信抽奖小程序：</font></p><ul><li><p>1 用户ID，立即参与按钮：sadd key 用户ID</p></li><li><p>2 显示已经有多少人参与了上图23208人参加：SCARD key</p></li><li><p>3 抽奖(从set中任意选取N个中奖人)：</p><p>​     SRANDMEMBER key 2   随机抽奖2个人，元素不删除</p><pre><code> SPOP key3            随机抽奖3个人，元素会删除 </code></pre></li></ul></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182108.png"></p><hr><blockquote><p><font color='red'>微信朋友圈点赞：</font></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182109.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182110.png"></p><hr><blockquote><p><font color='red'>微博好友关注社交关系：</font></p></blockquote><p>共同关注的人：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182111.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182112.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182113.png"></p><hr><p>我关注的人也关注他(大家爱好相同)：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182114.png"></p><hr><blockquote><p><font color='red'>QQ内推可能认识的人：</font></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182115.png"></p><hr><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><blockquote><p>向有序集合中加入一个元素和该元素的分数</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 添加元素</span></span><br><span class="line">ZADD key score member [score member ...]</span><br><span class="line"></span><br><span class="line"><span class="section"># 按照元素分数从小到大的顺序 返回索引从start到stop之间的所有元素</span></span><br><span class="line">ZRANGE key start stop [WITHSCORES]</span><br><span class="line"></span><br><span class="line"><span class="section"># 获取元素的分数</span></span><br><span class="line"> ZSCORE key member</span><br><span class="line"> </span><br><span class="line"> # 删除元素</span><br><span class="line"> ZREM key member [member ...]</span><br><span class="line"> </span><br><span class="line"> # 获取指定分数范围的元素</span><br><span class="line"> ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span><br><span class="line"> </span><br><span class="line"> # 增加某个元素的分数</span><br><span class="line"> ZINCRBY key increment member</span><br><span class="line"> </span><br><span class="line"> # 获取集合中元素的数量</span><br><span class="line"> ZCARD key</span><br><span class="line"> </span><br><span class="line"> # 获得指定分数范围内的元素个数</span><br><span class="line"> ZCOUNT key min max</span><br><span class="line"> </span><br><span class="line"> # 按照排名范围删除元素</span><br><span class="line"> ZREMRANGEBYRANK key start stop</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取元素的排名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 从小到大</span></span><br><span class="line">ZRANK key member</span><br><span class="line"><span class="section"># 从大到小</span></span><br><span class="line">ZREVRANK key member</span><br></pre></td></tr></table></figure><hr><h4 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a><font color='red'>应用场景</font></h4><blockquote><p><font color='red'>根据商品销售对商品进行排序显示：</font></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182116.png"></p><hr><blockquote><p><font color='red'>抖音热搜：</font></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182117.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217182118.png"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-redis传统五大基本类型的落地应用&quot;&gt;&lt;a href=&quot;#2-redis传统五大基本类型的落地应用&quot; class=&quot;headerlink&quot; title=&quot;2_redis传统五大基本类型的落地应用&quot;&gt;&lt;/a&gt;2_redis传统五大基本类型的落地应用&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="面试汇总" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/"/>
    
    <category term="大厂面试第三季_周阳老师" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/"/>
    
    <category term="Redis" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/"/>
    
    
    <category term="Redis" scheme="http://jiangbk.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>1_安装Redis</title>
    <link href="http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/1-%E5%AE%89%E8%A3%85Redis/"/>
    <id>http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/1-%E5%AE%89%E8%A3%85Redis/</id>
    <published>2021-02-17T10:18:33.000Z</published>
    <updated>2021-02-17T10:27:29.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装Redis"><a href="#1-安装Redis" class="headerlink" title="1_安装Redis"></a>1_安装Redis</h1><p>官网地址：<a href="https://redis.io/">https://redis.io/</a></p><p>中文官网地址：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p><blockquote><p>说明：安全Bug按照官网提示，升级成为6.0.8</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装Redis&quot;&gt;&lt;a href=&quot;#1-安装Redis&quot; class=&quot;headerlink&quot; title=&quot;1_安装Redis&quot;&gt;&lt;/a&gt;1_安装Redis&lt;/h1&gt;&lt;p&gt;官网地址：&lt;a href=&quot;https://redis.io/&quot;&gt;https://r</summary>
      
    
    
    
    <category term="面试汇总" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/"/>
    
    <category term="大厂面试第三季_周阳老师" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/"/>
    
    <category term="Redis" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/Redis/"/>
    
    
    <category term="Redis" scheme="http://jiangbk.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>3_AQS</title>
    <link href="http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/AQS/3-AQS/"/>
    <id>http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/AQS/3-AQS/</id>
    <published>2021-02-17T10:16:56.000Z</published>
    <updated>2021-02-17T10:27:59.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-AQS"><a href="#3-AQS" class="headerlink" title="3_AQS"></a>3_AQS</h1><p>前置知识:</p><ul><li>公平锁和非公平锁</li><li>可重入锁</li><li>LockSupport</li><li>自旋锁</li><li>数据结构之链表</li><li>设计模式之模板设计模式</li></ul><hr><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote><p>字面意思：抽象的队列同步器</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181731.png"></p><p>源代码：AbstractQueuedSynchronizer 简称为AQS</p><blockquote><p>技术翻译：是用来构建锁或者其它同步器组件<code>的重量级基础框架及整个JUC体系的基石</code>，通过内置的<code>FIFO队列</code>来完成资源获取线程的排队工作，并通过一个<code>int类变量</code>表示持有锁的状态。</p><p>这里的同步器组件指CountDownLatch、Semaphore、ReentrantLock、ReentrantReadWriteLock 等</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181732.png">  </p><p><strong>锁和同步器的关系</strong></p><blockquote><p>锁：面向锁的<code>使用者</code>(定义了程序员和锁交互的使用层API，隐藏了实现细节，你调用即可)</p><p>同步器：面向锁的<code>实现者</code>(比如Java并发大神Douglee，提出统一规 范并简化了锁的实现，屏蔽了同步状态管理、阻塞线程排队和通知、唤醒机制等。)</p></blockquote><hr><h2 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h2><p><font color='red'>加锁会导致阻塞</font>，有阻塞就需要排队，实现排队必然需要有某种形式的队列来进行管理</p><p>抢到资源的线程直接使用办理业务，抢占不到资源的线程的必然涉及一种<code>排队等候机制</code>，抢占资源失败的线程继续去等待(类似办理窗口都满了，暂时没有受理窗口的顾客只能去<code>候客区排队等候</code>)，仍然保留获取锁的可能且获取锁流程仍在继续(候客区的顾客也在等着叫号，轮到了再去受理窗口办理业务）。</p><p>既然说到了排队等候机制，那么就一定会有某种队列形成，这样的队列是什么数据结构呢? </p><p>如果共享资源被占用，<code>就需要一定的阻塞等待唤醒机制来保证锁分配</code>。这个机制主要用的是<strong>CLH队列</strong>的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是<strong>AQS</strong>的抽象表现。它将请求共享资源的线程封装成队列的 <font color='red'>结点(Node)</font>，通过<strong>CAS、自旋以及LockSuport.park()**的方式，维护</strong>state变量**的状态，使并发达到同步的效果。                 </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181732.png"></p><hr><h2 id="AQS初识"><a href="#AQS初识" class="headerlink" title="AQS初识"></a>AQS初识</h2><p>官网解释：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181733.png"></p><p>有阻塞就需要排队，实现排队必然需要队列</p><p>AQS使用一个volatile的<code> int类型的成员变量state</code>来表示同步状态，通过内置的<code> FIFO队列</code>来完成资源获取的排队工作将每条要去抢占资源的线程封装成 一个 <font color='red'>Node节点</font> 来实现锁的分配，通过<strong>CAS</strong>完成对<strong>State</strong>值的修改。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181734.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181735.png"></p><hr><h2 id="AQS内部体系架构"><a href="#AQS内部体系架构" class="headerlink" title="AQS内部体系架构"></a>AQS内部体系架构</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181736.png"></p><hr><h3 id="AQS自身"><a href="#AQS自身" class="headerlink" title="AQS自身"></a>AQS自身</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181734.png"></p><h4 id="AQS的int变量："><a href="#AQS的int变量：" class="headerlink" title="AQS的int变量："></a>AQS的int变量：</h4><blockquote><p>AQS的同步状态State成员变量</p><p>类比，银行办理业务的受理窗口状态：</p><ul><li>零就是没人，自由状态可以办理</li><li>大于等于1，有人占用窗口，等着去</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The synchronization state.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br></pre></td></tr></table></figure><hr><h4 id="AQS的CLH队列"><a href="#AQS的CLH队列" class="headerlink" title="AQS的CLH队列"></a>AQS的CLH队列</h4><blockquote><p>CLH队列（三个大牛的名字组成），为一个<code>双向队列</code></p><p>类比，银行侯客区的等待顾客</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181737.png"></p><hr><p>小总结：</p><ul><li><font color='red'>有阻塞就需要排队，实现排队必然需要队列</font></li><li>state变量+CLH双端Node队列</li></ul><hr><h3 id="内部类Node（Node类在AQS类内部）"><a href="#内部类Node（Node类在AQS类内部）" class="headerlink" title="内部类Node（Node类在AQS类内部）"></a>内部类Node（Node类在AQS类内部）</h3><h4 id="Node的int变量"><a href="#Node的int变量" class="headerlink" title="Node的int变量"></a>Node的int变量</h4><blockquote><p>Node的等待状态<code>waitState</code>成员变量（注意与status状态区分，status表示同步状态）</p><p>类比，等候区其它顾客(其它线程)的等待状态</p><p>​         队列中每个排队的个体就是一个Node.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br></pre></td></tr></table></figure><hr><h4 id="Node此类的讲解"><a href="#Node此类的讲解" class="headerlink" title="Node此类的讲解"></a>Node此类的讲解</h4><p>内部结构：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181738.png" alt="17"></p><hr><p>属性说明：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181739.png"></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181740.png"></p><hr><h2 id="从我们的ReentrantLock开始解读AQS"><a href="#从我们的ReentrantLock开始解读AQS" class="headerlink" title="从我们的ReentrantLock开始解读AQS"></a>从我们的ReentrantLock开始解读AQS</h2><blockquote><p>Lock接口的实现类，基本都是通过【聚合】了一个【队列同步器】的子类完成线程访问控制的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lock lock &#x3D; new ReentrantLock();</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181734.png"></p><h4 id="ReentrantLock原理"><a href="#ReentrantLock原理" class="headerlink" title="ReentrantLock原理"></a>ReentrantLock原理</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181741.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181742.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181743.png"></p><h4 id="从最简单的lock方法开始看看公平和非公平"><a href="#从最简单的lock方法开始看看公平和非公平" class="headerlink" title="从最简单的lock方法开始看看公平和非公平"></a>从最简单的lock方法开始看看公平和非公平</h4><p>通过ReentrantLock的源码来讲解公平锁和非公平锁 可以明显看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件:<code>hasQueuedPredecessors()</code>，</p><p>hasQueuedPredecessors是公平锁加锁时判断等待队列中是否存在有效节点的方法 </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181744.png"></p><h4 id="非公平锁走起，方法lock"><a href="#非公平锁走起，方法lock" class="headerlink" title="非公平锁走起，方法lock()"></a>非公平锁走起，方法lock()</h4><p>对比公平锁和非公平锁的tryAcqure()方法的实现代码， 其实差别就在于非公平锁获取锁时比公平锁中少了一个判断!hasQueuedPredecessors() </p><p>hasQueuedPredecessors()中判断了是否需要排队，导致公平锁和非公平锁的差异如下: </p><ul><li>公平锁: 公平锁讲究先来先到，线程在获取锁时，如果这个锁的等待队列中已经有线程在等待，那么当前线程就会进入等待队列中;</li><li>非公平锁: 不管是否有等待队列，如果可以获取锁，则立刻占有锁对象。也就是说队列的第一个排队线程在unpark(), 之后还是需要竞争锁(存在线程竞争的情况下) </li></ul><h4 id="AQS源码深度分析走起"><a href="#AQS源码深度分析走起" class="headerlink" title="AQS源码深度分析走起"></a>AQS源码深度分析走起</h4><p>需要的快捷键：</p><ul><li>ctrl + alt + B：跳到实现类</li><li>ctrl + alt + 左箭头/右箭头：回到上次操作/回到下一次操作</li></ul><p><strong>公平锁：</strong> 从lock()开始，依次跳…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.lock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>非公平锁：</strong> 从lock()开始，依次跳…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.lock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论是公平还是非公平，最终都会走向<code>tryAcquire</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181745.png"></p><hr><blockquote><p>带入一个银行办理业务的案例来模拟我们的AQS如何进行线程的管理和通知唤醒机制 ：</p><p>3个线程模拟3个来银行网点，受理窗口办理业务的顾客</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs.locksupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> Created in 2021-01-25 16:43</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AQSDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//非公平锁</span></span><br><span class="line">        ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// A顾客就是第一个顾客，此时受理窗口没有任何人，A可以直接去办理</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;-----A thread come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MINUTES.sleep(<span class="number">20</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二个顾客，第二个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时B只能等待，</span></span><br><span class="line">        <span class="comment">// 进入候客区</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;-----B thread come in&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三个顾客，第三个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时C只能等待，</span></span><br><span class="line">        <span class="comment">// 进入候客区</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;-----C thread come in&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="lock方法分析"><a href="#lock方法分析" class="headerlink" title="lock方法分析"></a>lock方法分析</h5><p>A顾客过来办理业务，由于是非公平方式，走下面这条路</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于state的状态确实为0，和CAS预估值一样，CAS操作成功，将state值改为1，同时将Node节点中的线程设置为当前线程A</p><p>初始状态：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181746.png"></p><p>第一个顾客来之后：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181747.png"></p><hr><h5 id="acquire-方法分析"><a href="#acquire-方法分析" class="headerlink" title="acquire()方法分析"></a>acquire()方法分析</h5><p>第二个顾客过来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181748.png"></p><p>此时state的状态值为1，代表锁已经被占有，CAS失败，走<code>acquire()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先走<code>tryAcquire()</code>方法，如果成功就返回<code>ture</code>，取反返回<code>false</code>，就不走后面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread(); <span class="comment">//获取当前线程：此时是顾客B</span></span><br><span class="line">    <span class="keyword">int</span> c = getState(); <span class="comment">//获取state状态，此时值为1</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>下面对这个类中的两个判断进行分别解读：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">        setExclusiveOwnerThread(current);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况1：顾客B此时走入大厅，发现柜台有人在办理业务，需要去候客区排队，刚准备坐下时，此时顾客A办理完成，就直接去窗口办理：判断当前state状态是否为0，如果为0，进行CAS操作，将state设置为1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">    <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">    <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">    setState(nextc);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//附上state+1的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">    state = newState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况2：顾客A办理完，准备起身走时，发现还有件事忘记了办理，又坐下进行办理：判断当前线程是否为线程A，如果是，将state的状态值+1，（<font color='red'>可重入锁的实现</font>）</p><p>总结：这两种情形都是可以获取到锁，即走<code>tryAcquire()</code>方法时返回true</p><hr><h5 id="addWaiter方法分析"><a href="#addWaiter方法分析" class="headerlink" title="addWaiter方法分析"></a>addWaiter方法分析</h5><p>但，此时两种情形都不满足：即返回<code>false</code>，取反为<code>true</code>，继续走后面的方法<code>addWaiter(Node.EXCLUSIVE)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181749.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);  <span class="comment">//当前线程为B，节点为null</span></span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    Node pred = tail; <span class="comment">//tail为null</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将tail节点赋给pred节点，此时就为null，不会进入if，走入队方法<code>enq(node)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123; <span class="comment">//此时node为B顾客</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>注意：这是一个自旋操作，</font></p><p>tail为空节点，会进入<code>if</code>判断，通过CAS操作设置<code>head</code>头结点的指向Node空节点（此时Node节点即图中的傀儡节点，不储存数据，仅用于占位）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetHead</span><span class="params">(Node update)</span> </span>&#123; <span class="comment">//此时传入的update为一个Node空节点</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="keyword">this</span>, headOffset, <span class="keyword">null</span>, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181750.png"></p><p>然后再将<code>head</code>头结点的执行赋给<code>tail</code>尾结点的指向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail &#x3D; head;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181751.png"></p><p>完成后，不会走下面的else 分支。由于是自旋，继续从头开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;<span class="comment">//此时tail执行空节点，即不为null</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;<span class="comment">//将B线程的前指针指向t节点（这里即tail节点）所执行的节点（这里即空节点）</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tail</code>不为null，走<code>else</code>分支，</p><p>首先：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.prev &#x3D; t;&#x2F;&#x2F;将B线程的前指针指向空节点</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181752.png"></p><p>然后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compareAndSetTail(t, node) &#x2F;&#x2F;设置尾结点：将tail尾结点所执向的节点改为执向顾客B</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181753.png"></p><p>然后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t.next &#x3D; node; &#x2F;&#x2F;将空节点的next指针指向顾客B</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181754.png"></p><p>最后：<code>return</code>结束自旋！</p><hr><p>此时，第三个顾客C，也来办理业务，同样也没有抢到锁，需要走到<code>addWaiter(Node.EXCLUSIVE)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    Node pred = tail; <span class="comment">//tail节点执行顾客B</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，tail节点执行顾客B，赋给pred节点，所以pred节点也执行B，即pred不为null，需要进入<code>if</code>判断</p><p>首先：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.prev &#x3D; pred;&#x2F;&#x2F;将顾客C的头指针指向顾客B</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181755.png"></p><p>然后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compareAndSetTail(pred, node)&#x2F;&#x2F;设置尾结点指向顾客C</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181756.png"></p><p>最后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pred.next &#x3D; node;&#x2F;&#x2F;将顾客B的后指针指向顾客C</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181757.png"></p><p>发现没有顾客C没有走<code>enq(node)</code>方法，也就是说此时已有哨兵节点，不需要再去创建哨兵节点进行占位。</p><p>若还有其他顾客D、E….走这条路依然是这样。</p><hr><h5 id="acquireQueued方法分析"><a href="#acquireQueued方法分析" class="headerlink" title="acquireQueued方法分析"></a>acquireQueued方法分析</h5><p>虽然顾客B和顾客C依次都入了队，但是，没有真正的阻塞，下面开始执行<code>acquireQueued()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123; <span class="comment">//此时传入进的node为顾客B</span></span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;<span class="comment">//先不管这个，这是防止中途打断放弃的设置</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>这里又是一个自旋</font></p><p>首先：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node p = node.predecessor();<span class="comment">//设置p为哨兵节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//附上源码</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">    Node p = prev;<span class="comment">//prev为头指针，将其指向的节点付给p</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后：<code>p=head</code>相等，进入<code>tryAcquire</code>方法，再次尝试获取锁，假设现在依然抢不到锁，不能继续往下走，进入下一个<code>if</code>判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">    parkAndCheckInterrupt())</span><br><span class="line">    interrupted = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;<span class="comment">//此时pred为哨兵节点</span></span><br><span class="line">    <span class="keyword">int</span> ws = pred.waitStatus;<span class="comment">//此时为0</span></span><br><span class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)<span class="comment">//-1</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * This node has already set status asking a release</span></span><br><span class="line"><span class="comment">             * to signal it, so it can safely park.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class="line"><span class="comment">             * indicate retry.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//进入此语句</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class="line"><span class="comment">             * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class="line"><span class="comment">             * retry to make sure it cannot acquire before parking.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compareAndSetWaitStatus(pred, ws, Node.SIGNAL);&#x2F;&#x2F;设置waitStatus为-1</span><br></pre></td></tr></table></figure><p>由于是自旋，再次进入<code>acquireQueued</code>，尝试获取锁，获取失败，同理又进入<code>shouldParkAfterFailedAcquire</code>方法，但此时<code>waitStatus</code>值为1，所以进入下列<code>if</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * This node has already set status asking a release</span></span><br><span class="line"><span class="comment">             * to signal it, so it can safely park.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p><code>shouldParkAfterFailedAcquire</code>返回为<code>true</code>，继续向下执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">    parkAndCheckInterrupt())</span><br><span class="line">    interrupted = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//此时：真正被阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>这个时候，才调用<code>park()</code>方法，将线程进行阻塞！！！</font></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181758.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181759.png"></p><p>顾客C同理，都被阻塞在这里，直到拿到许可证，才可被依次放行</p><hr><h5 id="unlock-方法"><a href="#unlock-方法" class="headerlink" title="unlock()方法"></a>unlock()方法</h5><p>此时顾客A办理完业务，准备释放锁，走到<code>tryRelease</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = getState() - releases;<span class="comment">//此时c就为0</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        free = <span class="keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>); <span class="comment">//将当前拥有锁的线程设置为null</span></span><br><span class="line">    &#125;</span><br><span class="line">    setState(c); <span class="comment">//同时设置state值为0</span></span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回<code>true</code>，进入<code>release</code>方法的if语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;<span class="comment">//将头节点赋给h</span></span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)<span class="comment">//h的waitStarus状态值为-1</span></span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>unparkSuccessor(h)</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">         * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">         * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;  <span class="comment">//此时为-1</span></span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>); <span class="comment">//进入，通过CAS操作将状态设置为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">         * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">         * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">         * non-cancelled successor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>) <span class="comment">//upark唤醒线程</span></span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181800.png"></p><hr><p>此时，顾客B和顾客C正挂起阻塞着，这里unpark后，相当于给了一张许可证</p><p><font color='red'>顾客B来个回马枪！！！</font></p><p>顾客B再次来到这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123; <span class="comment">//顾客B</span></span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试获取锁<code>tryAcquire</code>,来到<code>nonfairTryAcquire</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时state的状态值为0，顾客B进入<code>if</code>判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">        setExclusiveOwnerThread(current);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将锁的线程设置当前线程B，返回<code>true</code></p><hr><p>即进入下列<code>if</code>判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">    setHead(node);</span><br><span class="line">    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    failed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> interrupted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setHead(node);<span class="comment">//设置头节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//附上源码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    head = node; <span class="comment">//将头节点指向顾客B</span></span><br><span class="line">    node.thread = <span class="keyword">null</span>; <span class="comment">//将顾客B的线程设置为null</span></span><br><span class="line">    node.prev = <span class="keyword">null</span>;<span class="comment">//前指针设置为null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181801.png"></p><p>然后：<font color='red'>将哨兵节点的后指针设置为null，此时哨兵节点等待垃圾回收</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.next &#x3D; null; &#x2F;&#x2F; help GC</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181802.png"></p><p>此时原顾客B节点就成为新的哨兵节点</p><p>同理，顾客C出队也是如此操作！！！</p><hr><h2 id="AQS考点"><a href="#AQS考点" class="headerlink" title="AQS考点"></a>AQS考点</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 第一个考点我相信你应该看过源码了，那么AQS里面有个变量叫State，它的值有几种？</span></span><br><span class="line"></span><br><span class="line">答 3个状态：没占用是0，占用了是1，大于1是可重入锁</span><br><span class="line"></span><br><span class="line"><span class="section"># 第二个考点 如果AB两个线程进来了以后，请问这个总共有多少个Node节点？</span></span><br><span class="line">答案是3个</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3-AQS&quot;&gt;&lt;a href=&quot;#3-AQS&quot; class=&quot;headerlink&quot; title=&quot;3_AQS&quot;&gt;&lt;/a&gt;3_AQS&lt;/h1&gt;&lt;p&gt;前置知识:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公平锁和非公平锁&lt;/li&gt;
&lt;li&gt;可重入锁&lt;/li&gt;
&lt;li&gt;LockSup</summary>
      
    
    
    
    <category term="面试汇总" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/"/>
    
    <category term="大厂面试第三季_周阳老师" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/"/>
    
    <category term="AQS" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/AQS/"/>
    
    
    <category term="AQS" scheme="http://jiangbk.top/tags/AQS/"/>
    
  </entry>
  
  <entry>
    <title>2_LockSupport</title>
    <link href="http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/AQS/2-LockSupport/"/>
    <id>http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/AQS/2-LockSupport/</id>
    <published>2021-02-17T10:14:56.000Z</published>
    <updated>2021-02-17T10:27:52.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-LockSupport"><a href="#2-LockSupport" class="headerlink" title="2_LockSupport"></a>2_LockSupport</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote><p>官方解释：LockSupport是用来创建锁和其他同步类的基本线程阻塞原语。</p><p>一句话：LockSupport中的park()和unpark()的作用分别是<code>阻塞线程</code>和<code>解除阻塞线程</code></p></blockquote><hr><h2 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩"></a>怎么玩</h2><p>线程等待唤醒机制(wait/notify)</p><h4 id="3种让线程等待和唤醒的方法"><a href="#3种让线程等待和唤醒的方法" class="headerlink" title="3种让线程等待和唤醒的方法"></a>3种让线程等待和唤醒的方法</h4><h5 id="方式1-使用synchronized"><a href="#方式1-使用synchronized" class="headerlink" title="方式1:  使用synchronized"></a>方式1:  使用synchronized</h5><blockquote><p>使用Object中的<code>wait()</code>方法让线程等待， 使用Object中的<code>notify()</code>方法唤醒线程</p></blockquote><p>正常情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs.locksupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 11:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object objectLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">synchronizedWaitNotify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objectLock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------被唤醒&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                objectLock.notify();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------通知&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedDemo.synchronizedWaitNotify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181558.png"></p><hr><p>异常情况1：wait方法和notify方法，两个都去掉同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs.locksupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 11:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object objectLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">synchronizedWaitNotify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="comment">//            synchronized (objectLock) &#123;</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objectLock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------被唤醒&quot;</span>);</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="comment">//            synchronized (objectLock) &#123;</span></span><br><span class="line">                objectLock.notify();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------通知&quot;</span>);</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedDemo.synchronizedWaitNotify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181559.png"></p><p>抛出异常！</p><blockquote><p>原因：synchronized是关键字属于JVM层面。monitorenter(底层是通过monitor对象来完成,其实wait/notify等方法也依赖monitor对象只能在同步块或方法中才能调用wait/notify等方法)</p></blockquote><hr><p>异常情况2：将notify放在wait方法前面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs.locksupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 11:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Object objectLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objectLock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------被唤醒&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                objectLock.notify();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------通知&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181600.png"></p><p>B线程先notify后，A线程后使用wait会出现另一个线程一直处于等待状态</p><hr><p><strong>小总结</strong></p><ul><li>wait和notify方法必须要在同步块或者方法里面且成对出现使用</li><li>先wait后notify才OK</li></ul><hr><h5 id="方式2：使用-lock"><a href="#方式2：使用-lock" class="headerlink" title="方式2：使用 lock"></a>方式2：使用 lock</h5><blockquote><p>Condition接口中的<code>await</code>后<code>signal</code>方法实现线程的等待和唤醒</p></blockquote><p>正常情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs.locksupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 11:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object objectLock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//等待</span></span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                condition.signal();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------通知&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//唤醒</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181601.png"></p><hr><p>异常情况1：不进行lock加锁、放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs.locksupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 11:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object objectLock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="comment">//            lock.lock();</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//                lock.unlock();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="comment">//            lock.lock();</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                condition.signal();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------通知&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//                lock.unlock();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181602.png"></p><p>同样也抛出异常！</p><hr><p>异常情况2：先unlock释放锁，再lock加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs.locksupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 11:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object objectLock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//TODO 一直卡在这里等待被唤醒</span></span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                condition.signal();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------通知&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181603.png"></p><p>B线程先进行释放锁，A线程再加锁，线程一直处于等待状态！</p><hr><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p>传统的synchronized和Lock实现等待唤醒通知的约束</p><p>必须满足下列条件：</p><ul><li>线程先要获得并持有锁，必须在锁块（synchronized或lock）中</li><li>必须要先等待后唤醒，线程才能够被唤醒</li></ul></blockquote><hr><h5 id="方式3：使用LockSupport"><a href="#方式3：使用LockSupport" class="headerlink" title="方式3：使用LockSupport"></a>方式3：使用LockSupport</h5><blockquote><p>LockSupport类中的<code>park</code>等待和<code>unpark</code>唤醒</p></blockquote><h6 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h6><blockquote><p>通过park()和unpark(thread)方法来实现阻塞和唤醒线程的操作</p></blockquote><p>官网解释：LockSupport是用来创建锁和其他同步类的基本线程阻塞原语。</p><p>LockSupport类使用了一种名为Permit(许可）的概念来做到阻塞和唤醒线程的功能，<code>每个线程都有一个许可(permit)</code>,permit只有两个值1和零，默认是零。可以把许可看成是一种(0,1)信号量(Semaphore），但与Semaphore不同的是，许可的累加上限是1。 </p><hr><h6 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h6><p>阻塞：park()/park(Object blocker)：阻塞当前线程/阻塞传入的具体线程</p><p>permit默认是0，所以一开始调用park()方法，当前线程就会阻塞，直到别的线程将当前线程的permit设置为1时,park方法会被唤醒，然后会将permit再次设置为0并返回。 </p><p>唤醒：unpark(Thread thread)：唤醒处于阻断状态的指定线程</p><p>调用unpark(thread)方法后，就会将thread线程的许可permit设置成1(注意多次调用unpark方法，不会累加，permit值还是1)会自动唤醒thread线程，即之前阻塞中的LockSupport.park()方法会立即返回。</p><hr><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><p>正常情况：无锁块要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs.locksupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LockSupport：俗称 锁中断</span></span><br><span class="line"><span class="comment"> * 以前的两种方式：</span></span><br><span class="line"><span class="comment"> * 1.以前的等待唤醒通知机制必须synchronized里面有一个wait和notify</span></span><br><span class="line"><span class="comment"> * 2.lock里面有await和signal</span></span><br><span class="line"><span class="comment"> * 这上面这两个都必须要持有锁才能干</span></span><br><span class="line"><span class="comment"> * LockSupport它的解决的痛点</span></span><br><span class="line"><span class="comment"> * 1.LockSupport不用持有锁块，不用加锁，程序性能好，</span></span><br><span class="line"><span class="comment"> * 2.先后顺序，不容易导致卡死</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ----&quot;</span> + <span class="string">&quot;come  in....&quot;</span>);</span><br><span class="line">            LockSupport.park();<span class="comment">//阻塞当前线程...等待被放行</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ----被唤醒&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待3s，让t2线程发放许可证</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ----&quot;</span> + <span class="string">&quot;通知了&quot;</span>);</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181604.png"></p><hr><p>之前错误的先唤醒后等待，LockSupport照样支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ----&quot;</span> + <span class="string">&quot;come  in....&quot;</span> + System.currentTimeMillis());</span><br><span class="line">            LockSupport.park();<span class="comment">//阻塞当前线程...等待被放行</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ----被唤醒....&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ----&quot;</span> + <span class="string">&quot;通知了&quot;</span>);</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181605.png"></p><p>发现t1线程并没有进入执行lock方法（此时它已有许可证）</p><hr><h6 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h6><p>LockSupport是用来创建锁和其他同步类的基本线程阻塞原语，LockSupport是一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结底，LockSupport调用的Unsafe中的<code>native代码</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UNSAFE.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unpark</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (thread != <span class="keyword">null</span>)</span><br><span class="line">        UNSAFE.unpark(thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LockSupport提供park()和unpark()方法实现<code>阻塞线程</code>和<code>解除线程阻塞</code>的过程：</p><ul><li>LockSupport和每个使用它的线程都有一个许可(permit)关联。permit相当于1，0的开关，默认是0。</li><li>调用一次unpark就加1变成1，<code>调用一次park会消费permit，也就是将1变成0</code>，同时park立即返回。</li><li>如再次调用park会变成阻塞(因为permit为零了会阻塞在这里，一直到permit变为1)，这时调用unpark会把permit置为1。</li><li>每个线程都有一个相关的permit, <code>permit最多只有一个</code>，重复调用unpark也不会积累凭证。</li></ul><p>形象的理解：</p><ul><li>线程阻塞需要消耗凭证(permit)，这个凭证最多只有1个。</li><li>当调用park方法时 ，如果有凭证，则会直接消耗掉这个凭证然后正常退出;  如果无凭证，就必须阻塞等待凭证可用;</li><li>而unpark则相反，它会增加一个凭证，但凭证最多只能有1个，累加无效。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ----&quot;</span> + <span class="string">&quot;come  in....&quot;</span>);</span><br><span class="line">            <span class="comment">//消耗一张凭证</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            <span class="comment">//TODO 没有凭证,继续等待.....</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ----被唤醒&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ----&quot;</span> + <span class="string">&quot;通知了&quot;</span>);</span><br><span class="line">            <span class="comment">//TODO 发放凭证：最多为1</span></span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">            </span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181606.png"></p><p>此时虽然unpark了两次，但是permit许可证最多为1，所以第一次park消费掉凭证，第二次park时，许可证为0，阻塞等待。</p><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 面试题</span></span><br><span class="line"><span class="section"># 为什么可以先唤醒线程后阻塞线程?</span></span><br><span class="line">因为unpark获得了一个凭证，之后再调用park方法，就可以名正言顺的凭证消费，故不会阻塞。</span><br><span class="line"></span><br><span class="line"><span class="section"># 为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程?</span></span><br><span class="line">因为凭证的数量最多为1，连续调用两次unpark和调用一次unpark效果一样，只会增加一个凭证;而调用两次park却需要消费两个凭证，证不够，不能放行。</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-LockSupport&quot;&gt;&lt;a href=&quot;#2-LockSupport&quot; class=&quot;headerlink&quot; title=&quot;2_LockSupport&quot;&gt;&lt;/a&gt;2_LockSupport&lt;/h1&gt;&lt;h2 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; c</summary>
      
    
    
    
    <category term="面试汇总" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/"/>
    
    <category term="大厂面试第三季_周阳老师" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/"/>
    
    <category term="AQS" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/AQS/"/>
    
    
    <category term="LockSupport" scheme="http://jiangbk.top/tags/LockSupport/"/>
    
  </entry>
  
  <entry>
    <title>1_可重入锁</title>
    <link href="http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/AQS/1-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/"/>
    <id>http://jiangbk.top/2021/02/17/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3_%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/AQS/1-%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/</id>
    <published>2021-02-17T10:12:36.000Z</published>
    <updated>2021-02-17T10:27:45.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-可重入锁"><a href="#1-可重入锁" class="headerlink" title="1_可重入锁"></a>1_可重入锁</h1><blockquote><p><strong>可重入锁：</strong> 又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁(前提：<code>锁对象得是同一个对象</code>)，不会因为之前已经获取过还没释放而阻塞。</p><p>Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p></blockquote><p>类似于家里面的大门,进入之后可以进入厕所、厨房等</p><hr><p>“可重入锁”这四个字分开来解释:</p><ul><li>可：可以。</li><li>重：再次。</li><li>入：进入</li><li>锁：同步锁</li><li>进入什么：进入同步域（即同步代码块/方法或显式锁锁定的代码）</li></ul><blockquote><p>一句话：一个线程中的多个流程可以获取同一把锁，持有这把同步锁可以再次进入。自己可以获取自己的内部锁</p></blockquote><hr><h2 id="可重入锁种类"><a href="#可重入锁种类" class="headerlink" title="可重入锁种类"></a>可重入锁种类</h2><h3 id="隐式锁"><a href="#隐式锁" class="headerlink" title="隐式锁"></a>隐式锁</h3><blockquote><p>隐式锁（即synchronized关键字使用的锁）默认是可重入锁</p></blockquote><p>同步块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 可重入锁:可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁，这样的锁就叫做可重入锁。</span></span><br><span class="line"><span class="comment"> * 在一个synchronized修饰的方法或代码块的内部</span></span><br><span class="line"><span class="comment"> * 调用本类的其他synchronized修饰的方法或代码块时，是永远可以得到锁的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 10:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReEnterLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="keyword">static</span> Object objectLockA = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLockA) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------外层调用&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (objectLockA) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------中层调用&quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (objectLockA) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;------内层调用&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181425.png"></p><hr><p>同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 10:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReEnterLock2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====外层&quot;</span>);</span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====中层&quot;</span>);</span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====内层&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ReEnterLock2().m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181426.png"></p><hr><h4 id="Synchronized的重入的实现机理"><a href="#Synchronized的重入的实现机理" class="headerlink" title="Synchronized的重入的实现机理"></a>Synchronized的重入的实现机理</h4><blockquote><p>每个锁对象拥有一个<code>锁计数器</code>和一个指向<code>持有该锁的线程</code>的指针</p></blockquote><p>当执行<code>monitorenter</code>时,如果目标锁对象的计数器为零,那么说明它没有被其他线程持有,Java虚拟机会将该锁对象</p><p>的持有线程设置为当前线程,并且将其计数器加1,否则需要等待,直至持有线程释放该锁</p><p>当执行<code>monitorexit</code>时,Java虚拟机则锁对象的计数器减1。计数器为零代表锁已经被释放</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181427.png"></p><p>说明：第一个<code>monitorexit</code>是在方法执行完成时使用，第二个<code>monitorexit</code>是在发生异常时，能够保证锁的自动释放。</p><hr><h3 id="显示锁"><a href="#显示锁" class="headerlink" title="显示锁"></a>显示锁</h3><blockquote><p>显式锁（即Lock）也有ReentrantLock这样的可重入锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 10:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReEnterLock3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;=======外层&quot;</span>);</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;=======内层&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181428.png"></p><p>发现，同一个线程可以再次获取、释放同一把锁。</p><hr><p>那如果现在加锁释放锁的次数不匹配：加锁两次，释放一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: xj0927</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> Created in 2021-01-25 10:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> By:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReEnterLock3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//加锁两次</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;=======外层&quot;</span>);</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;=======内层&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//只释放一次</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;t2 thread----外层调用lock&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/zhao_guojiang6/my_pic_bed/raw/master/img/20210217181429.png"></p><p>由于加锁次数和释放次数不一样，第二个线程始终无法获取到锁，导致一直在等待。</p><p><font color='orange'>正常情况，加锁几次就要解锁几次</font></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-可重入锁&quot;&gt;&lt;a href=&quot;#1-可重入锁&quot; class=&quot;headerlink&quot; title=&quot;1_可重入锁&quot;&gt;&lt;/a&gt;1_可重入锁&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;可重入锁：&lt;/strong&gt; 又名递归锁，是指在同一个线程在外层方</summary>
      
    
    
    
    <category term="面试汇总" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/"/>
    
    <category term="大厂面试第三季_周阳老师" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/"/>
    
    <category term="AQS" scheme="http://jiangbk.top/categories/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95%E7%AC%AC%E4%B8%89%E5%AD%A3-%E5%91%A8%E9%98%B3%E8%80%81%E5%B8%88/AQS/"/>
    
    
    <category term="可重入锁" scheme="http://jiangbk.top/tags/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81/"/>
    
  </entry>
  
</feed>
